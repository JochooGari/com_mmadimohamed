// Script de migration du localStorage vers le stockage local
import { LocalStorage } from './storage';
import { LocalFileStorage, MonitoringStorage } from './fileStorage';
import { AIOptimizer } from './aiOptimizer';

export class MigrationScript {
  
  // Ex√©cuter la migration compl√®te
  static async runFullMigration(): Promise<void> {
    console.log('üöÄ D√©marrage de la migration vers le stockage local...');
    
    try {
      // √âtape 1: Cr√©er la structure de dossiers
      await this.createDirectoryStructure();
      
      // √âtape 2: Migrer les donn√©es des agents
      await this.migrateAgentData();
      
      // √âtape 3: Initialiser le syst√®me de veille
      await this.initializeMonitoringSystem();
      
      // √âtape 4: Optimiser toutes les donn√©es pour l'IA
      await this.optimizeAllData();
      
      // √âtape 5: Valider la migration
      await this.validateMigration();
      
      // √âtape 6: G√©n√©rer le rapport de migration
      await this.generateMigrationReport();
      
      console.log('‚úÖ Migration termin√©e avec succ√®s!');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la migration:', error);
      throw error;
    }
  }

  // Cr√©er la structure de dossiers
  private static async createDirectoryStructure(): Promise<void> {
    console.log('üìÅ Cr√©ation de la structure de dossiers...');
    
    const fs = await import('fs');
    const path = await import('path');
    
    const directories = [
      'data/agents/linkedin/inputs',
      'data/agents/linkedin/outputs',
      'data/agents/geo/inputs', 
      'data/agents/geo/outputs',
      'data/monitoring/sources',
      'data/monitoring/optimized',
      'data/monitoring/reports',
      'data/exports',
      'data/backups'
    ];
    
    for (const dir of directories) {
      const fullPath = path.join(process.cwd(), dir);
      try {
        await fs.promises.mkdir(fullPath, { recursive: true });
        console.log(`  ‚úì ${dir} cr√©√©`);
      } catch (error) {
        console.log(`  ‚úì ${dir} existe d√©j√†`);
      }
    }
  }

  // Migrer les donn√©es des agents depuis localStorage
  private static async migrateAgentData(): Promise<void> {
    console.log('ü§ñ Migration des donn√©es des agents...');
    
    const agentTypes: Array<'linkedin' | 'geo'> = ['linkedin', 'geo'];
    
    for (const agentType of agentTypes) {
      console.log(`  üìã Migration des donn√©es ${agentType}...`);
      
      try {
        // R√©cup√©rer les donn√©es du localStorage (si disponibles)
        const sources = LocalStorage.getContentSources(agentType);
        const config = LocalStorage.getAgentConfig(agentType);
        const campaigns = LocalStorage.getCampaigns(agentType);
        const testResults = LocalStorage.getTestResults(agentType);
        
        // Migrer vers le nouveau syst√®me si des donn√©es existent
        if (sources.length > 0) {
          await LocalFileStorage.saveContentSources(agentType, sources);
          console.log(`    ‚úì ${sources.length} sources migr√©es`);
        }
        
        if (config) {
          await LocalFileStorage.saveAgentConfig(agentType, config);
          console.log(`    ‚úì Configuration migr√©e`);
        }
        
        if (campaigns.length > 0) {
          await LocalFileStorage.saveCampaigns(agentType, campaigns);
          console.log(`    ‚úì ${campaigns.length} campagnes migr√©es`);
        }
        
        if (testResults.length > 0) {
          await LocalFileStorage.saveTestResults(agentType, testResults);
          console.log(`    ‚úì ${testResults.length} r√©sultats de test migr√©s`);
        }
        
        if (sources.length === 0 && !config && campaigns.length === 0) {
          console.log(`    ‚ÑπÔ∏è Aucune donn√©e existante pour ${agentType}`);
          
          // Cr√©er des donn√©es d'exemple pour la d√©monstration
          await this.createExampleData(agentType);
        }
        
      } catch (error) {
        console.log(`    ‚ÑπÔ∏è Pas de donn√©es localStorage pour ${agentType}, cr√©ation de donn√©es d'exemple`);
        await this.createExampleData(agentType);
      }
    }
  }

  // Cr√©er des donn√©es d'exemple
  private static async createExampleData(agentType: 'linkedin' | 'geo'): Promise<void> {
    const exampleSources = [
      {
        id: `example-${agentType}-1`,
        name: `Guide ${agentType === 'linkedin' ? 'LinkedIn Marketing' : 'Marketing G√©olocalis√©'}`,
        type: 'document' as const,
        status: 'ready' as const,
        tags: [agentType, 'marketing', 'guide'],
        lastUpdated: new Date().toISOString(),
        content: agentType === 'linkedin' 
          ? 'Guide complet sur le marketing LinkedIn. Strat√©gies d\'engagement, cr√©ation de contenu, et mesure du ROI. L\'automatisation marketing permet d\'optimiser les campagnes et d\'am√©liorer la g√©n√©ration de leads.'
          : 'Guide du marketing g√©olocalis√©. Ciblage par zone g√©ographique, campagnes locales, et optimisation pour les recherches locales. Les outils de g√©olocalisation permettent de personnaliser les messages selon la localisation.',
        extractedData: {
          wordCount: agentType === 'linkedin' ? 32 : 35,
          language: 'fr'
        }
      },
      {
        id: `example-${agentType}-2`, 
        name: `Meilleures Pratiques ${agentType === 'linkedin' ? 'LinkedIn' : 'G√©omarketing'}`,
        type: 'transcript' as const,
        status: 'ready' as const,
        tags: [agentType, 'best-practices', 'strategies'],
        lastUpdated: new Date().toISOString(),
        content: agentType === 'linkedin'
          ? 'Transcript d\'une session sur les meilleures pratiques LinkedIn. Importance de la personnalisation des messages, utilisation des outils comme Sales Navigator, et mesure de l\'engagement. Le ROI se mesure via les conversions et la g√©n√©ration de leads qualifi√©s.'
          : 'Transcript sur le g√©omarketing. Utilisation des donn√©es de localisation pour cibler les audiences locales, optimisation des campagnes par zone g√©ographique, et int√©gration avec les outils de CRM. La personnalisation selon la localisation am√©liore significativement les taux de conversion.',
        extractedData: {
          wordCount: agentType === 'linkedin' ? 45 : 48,
          language: 'fr'
        }
      }
    ];

    const exampleConfig = {
      name: `Agent ${agentType === 'linkedin' ? 'LinkedIn' : 'GEO'} Expert`,
      description: agentType === 'linkedin' 
        ? 'Agent sp√©cialis√© dans le marketing et l\'automatisation LinkedIn'
        : 'Agent sp√©cialis√© dans le marketing g√©olocalis√© et les campagnes locales',
      prompt: agentType === 'linkedin'
        ? 'Tu es un expert en marketing LinkedIn avec une expertise approfondie en automatisation, g√©n√©ration de leads, et optimisation des campagnes. Tu utilises tes connaissances pour aider les utilisateurs √† am√©liorer leur strat√©gie LinkedIn et leur ROI.'
        : 'Tu es un expert en marketing g√©olocalis√© avec une expertise en ciblage g√©ographique, campagnes locales, et optimisation pour les recherches locales. Tu aides les utilisateurs √† d√©velopper des strat√©gies marketing adapt√©es √† leur zone g√©ographique.',
      model: 'gpt-4',
      temperature: 0.7,
      maxTokens: 2000,
      tools: agentType === 'linkedin' ? ['LinkedIn Ads', 'Sales Navigator', 'HubSpot'] : ['Google My Business', 'Facebook Local Ads', 'G√©olocalisation'],
      specialties: agentType === 'linkedin' ? ['lead-generation', 'engagement', 'automation'] : ['local-seo', 'geo-targeting', 'local-campaigns']
    };

    const exampleCampaigns = [
      {
        id: `example-campaign-${agentType}-1`,
        name: `Campagne ${agentType === 'linkedin' ? 'LinkedIn Lead Gen' : 'G√©olocalis√©e Q1'}`,
        type: agentType,
        status: 'active' as const,
        config: {
          objective: agentType === 'linkedin' ? 'lead-generation' : 'local-awareness',
          targetAudience: agentType === 'linkedin' ? 'Business professionals, Marketing managers' : 'Local customers, 5km radius',
          budget: agentType === 'linkedin' ? 5000 : 3000,
          duration: '30 days'
        },
        createdAt: new Date().toISOString()
      }
    ];

    // Sauvegarder les donn√©es d'exemple
    await LocalFileStorage.saveContentSources(agentType, exampleSources);
    await LocalFileStorage.saveAgentConfig(agentType, exampleConfig);
    await LocalFileStorage.saveCampaigns(agentType, exampleCampaigns);

    console.log(`    ‚úì Donn√©es d'exemple cr√©√©es pour ${agentType}`);
  }

  // Initialiser le syst√®me de veille
  private static async initializeMonitoringSystem(): Promise<void> {
    console.log('üìä Initialisation du syst√®me de veille...');
    
    // Cr√©er des exemples de contenu de veille
    const exampleMonitoringContent = [
      {
        id: `monitoring-example-1-${Date.now()}`,
        title: 'Les Tendances Marketing 2024 : IA et Automatisation',
        content: 'L\'intelligence artificielle transforme le paysage marketing. Les entreprises adoptent de plus en plus l\'automatisation pour personnaliser l\'exp√©rience client et optimiser leur ROI. Les outils comme ChatGPT, HubSpot et Salesforce int√®grent d√©sormais des fonctionnalit√©s IA avanc√©es.',
        type: 'article' as const,
        source: 'Marketing Weekly',
        url: 'https://example.com/marketing-trends-2024',
        author: 'Marie Dupont',
        publishedAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        collectedAt: new Date().toISOString(),
        tags: ['ai', 'automation', 'trends', '2024'],
        metadata: {
          platform: 'web',
          category: 'industry-trends',
          readingTime: 5
        }
      },
      {
        id: `monitoring-example-2-${Date.now()}`,
        title: 'ROI du Marketing LinkedIn : √âtude de Cas',
        content: '√âtude approfondie sur l\'am√©lioration du ROI gr√¢ce √† LinkedIn. Une entreprise B2B a augment√© ses leads de 250% en utilisant Sales Navigator et des campagnes cibl√©es. La cl√© du succ√®s : personnalisation des messages et suivi rigoureux des m√©triques.',
        type: 'post' as const,
        source: 'LinkedIn',
        url: 'https://linkedin.com/posts/example-roi-study',
        author: 'Jean Marketing Expert',
        publishedAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),
        collectedAt: new Date().toISOString(),
        tags: ['linkedin', 'roi', 'case-study', 'b2b'],
        metadata: {
          platform: 'linkedin',
          engagement: { likes: 150, comments: 25, shares: 30 }
        }
      },
      {
        id: `monitoring-example-3-${Date.now()}`,
        title: 'Thread: 10 Outils d\'Automatisation Marketing Incontournables',
        content: 'üßµ Thread sur les outils d\'automatisation marketing les plus efficaces en 2024: 1/ HubSpot pour l\'inbound 2/ Mailchimp pour l\'email 3/ Zapier pour l\'int√©gration 4/ Salesforce pour le CRM 5/ Google Analytics pour le tracking... Ces outils permettent d\'optimiser le ROI et de gagner du temps.',
        type: 'tweet' as const,
        source: 'Twitter',
        url: 'https://twitter.com/marketingpro/status/example',
        author: '@MarketingPro',
        publishedAt: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
        collectedAt: new Date().toISOString(),
        tags: ['tools', 'automation', 'thread', 'twitter'],
        metadata: {
          platform: 'twitter',
          metrics: { retweets: 45, likes: 120, replies: 15 }
        }
      }
    ];

    // Sauvegarder le contenu de veille
    for (const content of exampleMonitoringContent) {
      await MonitoringStorage.saveMonitoringContent(content);
    }

    console.log(`  ‚úì ${exampleMonitoringContent.length} exemples de veille cr√©√©s`);
  }

  // Optimiser toutes les donn√©es pour l'IA
  private static async optimizeAllData(): Promise<void> {
    console.log('üß† Optimisation des donn√©es pour l\'IA...');
    
    await AIOptimizer.optimizeAllData();
    
    console.log('  ‚úì Donn√©es optimis√©es pour l\'IA');
  }

  // Valider la migration
  private static async validateMigration(): Promise<void> {
    console.log('üîç Validation de la migration...');
    
    // V√©rifier que les donn√©es sont bien migr√©es
    const linkedinSources = await LocalFileStorage.getContentSources('linkedin');
    const geoSources = await LocalFileStorage.getContentSources('geo');
    const stats = await MonitoringStorage.getMonitoringStats();
    
    if (linkedinSources.length === 0) {
      throw new Error('Migration LinkedIn √©chou√©e - aucune source trouv√©e');
    }
    
    if (geoSources.length === 0) {
      throw new Error('Migration GEO √©chou√©e - aucune source trouv√©e');
    }
    
    if (stats.totalItems === 0) {
      throw new Error('Syst√®me de veille non initialis√©');
    }
    
    console.log(`  ‚úì ${linkedinSources.length} sources LinkedIn migr√©es`);
    console.log(`  ‚úì ${geoSources.length} sources GEO migr√©es`);
    console.log(`  ‚úì ${stats.totalItems} √©l√©ments de veille index√©s`);
  }

  // G√©n√©rer le rapport de migration
  private static async generateMigrationReport(): Promise<void> {
    console.log('üìã G√©n√©ration du rapport de migration...');
    
    const linkedinData = await LocalFileStorage.getAgentData('linkedin');
    const geoData = await LocalFileStorage.getAgentData('geo');
    const monitoringStats = await MonitoringStorage.getMonitoringStats();
    
    const report = {
      migrationDate: new Date().toISOString(),
      version: '1.0.0',
      status: 'success',
      summary: {
        linkedinAgent: {
          sources: linkedinData.sources.length,
          campaigns: linkedinData.campaigns.length,
          hasConfig: !!linkedinData.config,
          testResults: linkedinData.testResults.length
        },
        geoAgent: {
          sources: geoData.sources.length,
          campaigns: geoData.campaigns.length,
          hasConfig: !!geoData.config,
          testResults: geoData.testResults.length
        },
        monitoring: {
          totalItems: monitoringStats.totalItems,
          contentTypes: Object.keys(monitoringStats.byType).length,
          sources: Object.keys(monitoringStats.bySource).length,
          keywordsTracked: Object.keys(monitoringStats.keywords).length
        }
      },
      improvements: [
        '‚úÖ Stockage local s√©curis√© remplace localStorage',
        '‚úÖ Structure organis√©e inputs/outputs pour chaque agent',
        '‚úÖ Syst√®me de veille automatique op√©rationnel',
        '‚úÖ Optimisation des donn√©es pour l\'IA',
        '‚úÖ Tra√ßabilit√© compl√®te des contenus collect√©s',
        '‚úÖ Index de recherche et analytics int√©gr√©s'
      ],
      nextSteps: [
        '1. Int√©grer le nouveau syst√®me dans l\'interface utilisateur',
        '2. Configurer les agents de veille selon les besoins',
        '3. Former les utilisateurs aux nouvelles fonctionnalit√©s',
        '4. Programmer des sauvegardes automatiques',
        '5. Monitorer les performances du syst√®me'
      ],
      backupLocation: 'data/backups/',
      configFiles: [
        'data/agents/linkedin/inputs/config.json',
        'data/agents/geo/inputs/config.json',
        'data/monitoring/config.json'
      ],
      optimizedFiles: [
        'data/agents/linkedin/outputs/knowledge_base.json',
        'data/agents/geo/outputs/knowledge_base.json',
        'data/monitoring/optimized/monitoring_knowledge_base.json',
        'data/global_knowledge_base.json'
      ]
    };

    const fs = await import('fs');
    const path = await import('path');
    
    const reportPath = path.join(process.cwd(), 'data', 'migration_report.json');
    await fs.promises.writeFile(reportPath, JSON.stringify(report, null, 2));
    
    console.log(`üìä Rapport de migration sauvegard√©: ${reportPath}`);
    
    // Afficher le r√©sum√©
    console.log('\nüéâ Migration r√©ussie! R√©sum√©:');
    console.log(`üìÅ ${report.summary.linkedinAgent.sources} sources LinkedIn migr√©es`);
    console.log(`üìÅ ${report.summary.geoAgent.sources} sources GEO migr√©es`);
    console.log(`üìä ${report.summary.monitoring.totalItems} √©l√©ments de veille index√©s`);
    console.log(`üîß Donn√©es optimis√©es pour l'IA dans ${report.optimizedFiles.length} fichiers`);
  }

  // Cr√©er une sauvegarde avant migration
  static async createPreMigrationBackup(): Promise<void> {
    console.log('üíæ Cr√©ation d\'une sauvegarde avant migration...');
    
    try {
      // Exporter toutes les donn√©es localStorage existantes
      const allData = LocalStorage.getAllStoredData();
      
      const fs = await import('fs');
      const path = await import('path');
      
      const backupPath = path.join(process.cwd(), 'data', 'backups');
      await fs.promises.mkdir(backupPath, { recursive: true });
      
      const backupFile = path.join(backupPath, `pre_migration_backup_${Date.now()}.json`);
      await fs.promises.writeFile(backupFile, JSON.stringify(allData, null, 2));
      
      console.log(`‚úÖ Sauvegarde cr√©√©e: ${backupFile}`);
      
    } catch (error) {
      console.log('‚ÑπÔ∏è Aucune donn√©e localStorage √† sauvegarder');
    }
  }

  // Rollback en cas de probl√®me
  static async rollbackMigration(): Promise<void> {
    console.log('üîÑ Rollback de la migration...');
    
    try {
      const fs = await import('fs');
      const path = await import('path');
      
      // Supprimer le dossier data cr√©√©
      const dataPath = path.join(process.cwd(), 'data');
      await fs.promises.rm(dataPath, { recursive: true, force: true });
      
      console.log('‚úÖ Rollback effectu√© - dossier data supprim√©');
      
    } catch (error) {
      console.error('‚ùå Erreur lors du rollback:', error);
    }
  }
}

// Fonction principale pour lancer la migration
export async function runMigration(): Promise<void> {
  try {
    // Cr√©er une sauvegarde avant de commencer
    await MigrationScript.createPreMigrationBackup();
    
    // Ex√©cuter la migration compl√®te
    await MigrationScript.runFullMigration();
    
    console.log('\nüöÄ Migration termin√©e avec succ√®s!');
    console.log('\nLe nouveau syst√®me de stockage local est maintenant op√©rationnel.');
    console.log('Consultez le fichier data/migration_report.json pour le d√©tail complet.');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la migration:', error);
    console.log('\nVoulez-vous effectuer un rollback? Ex√©cutez MigrationScript.rollbackMigration()');
    throw error;
  }
}