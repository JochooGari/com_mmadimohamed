// Syst√®me de stockage adapt√© pour l'environnement web
import { ContentSource, Agent, Campaign } from './types';

export class WebFileStorage {
  private static apiUrl = '/api/storage';

  // Cr√©er la structure des dossiers
  static async createDirectoryStructure(): Promise<boolean> {
    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'create_structure' })
      });
      
      const result = await response.json();
      return result.success;
    } catch (error) {
      console.error('Erreur cr√©ation structure:', error);
      return false;
    }
  }

  // Sauvegarder les sources de contenu
  static async saveContentSources(agentType: 'linkedin' | 'geo', sources: ContentSource[]): Promise<boolean> {
    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'save_sources',
          agentType,
          data: sources
        })
      });
      
      const result = await response.json();
      if (result.success) {
        console.log(`‚úÖ ${result.count} sources sauvegard√©es pour ${agentType}`);
      }
      return result.success;
    } catch (error) {
      console.error('Erreur sauvegarde sources:', error);
      return false;
    }
  }

  // R√©cup√©rer les sources de contenu
  static async getContentSources(agentType: 'linkedin' | 'geo'): Promise<ContentSource[]> {
    try {
      const response = await fetch(`${this.apiUrl}?agent=${agentType}&type=sources`);
      const sources = await response.json();
      return Array.isArray(sources) ? sources : [];
    } catch (error) {
      console.error('Erreur r√©cup√©ration sources:', error);
      return [];
    }
  }

  // Sauvegarder la configuration d'un agent
  static async saveAgentConfig(agentType: 'linkedin' | 'geo', config: any): Promise<boolean> {
    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'save_config',
          agentType,
          data: config
        })
      });
      
      const result = await response.json();
      if (result.success) {
        console.log(`‚úÖ Configuration sauvegard√©e pour ${agentType}`);
      }
      return result.success;
    } catch (error) {
      console.error('Erreur sauvegarde config:', error);
      return false;
    }
  }

  // R√©cup√©rer la configuration d'un agent
  static async getAgentConfig(agentType: 'linkedin' | 'geo'): Promise<any> {
    try {
      const response = await fetch(`${this.apiUrl}?agent=${agentType}&type=config`);
      const config = await response.json();
      return Array.isArray(config) ? null : config;
    } catch (error) {
      console.error('Erreur r√©cup√©ration config:', error);
      return null;
    }
  }

  // Sauvegarder les campagnes
  static async saveCampaigns(agentType: 'linkedin' | 'geo', campaigns: Campaign[]): Promise<boolean> {
    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'save_campaigns',
          agentType,
          data: campaigns
        })
      });
      
      const result = await response.json();
      if (result.success) {
        console.log(`‚úÖ ${result.count} campagnes sauvegard√©es pour ${agentType}`);
      }
      return result.success;
    } catch (error) {
      console.error('Erreur sauvegarde campagnes:', error);
      return false;
    }
  }

  // R√©cup√©rer les campagnes
  static async getCampaigns(agentType: 'linkedin' | 'geo'): Promise<Campaign[]> {
    try {
      const response = await fetch(`${this.apiUrl}?agent=${agentType}&type=campaigns`);
      const campaigns = await response.json();
      return Array.isArray(campaigns) ? campaigns : [];
    } catch (error) {
      console.error('Erreur r√©cup√©ration campagnes:', error);
      return [];
    }
  }

  // Optimiser les donn√©es pour l'IA
  static async optimizeAgentData(agentType: 'linkedin' | 'geo'): Promise<boolean> {
    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'optimize_data',
          agentType
        })
      });
      
      const result = await response.json();
      if (result.success) {
        console.log(`üß† Donn√©es optimis√©es pour l'agent ${agentType}`);
      }
      return result.success;
    } catch (error) {
      console.error('Erreur optimisation:', error);
      return false;
    }
  }

  // Sauvegarder contenu de monitoring
  static async saveMonitoringContent(content: any): Promise<boolean> {
    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'save_monitoring',
          data: content
        })
      });
      
      const result = await response.json();
      if (result.success) {
        console.log(`üìä Contenu de veille sauvegard√©: ${content.title}`);
      }
      return result.success;
    } catch (error) {
      console.error('Erreur sauvegarde monitoring:', error);
      return false;
    }
  }

  // R√©cup√©rer les statistiques de monitoring
  static async getMonitoringStats(): Promise<any> {
    try {
      const response = await fetch(`${this.apiUrl}?agent=monitoring&type=stats`);
      const stats = await response.json();
      return stats;
    } catch (error) {
      console.error('Erreur r√©cup√©ration stats monitoring:', error);
      return {
        lastUpdated: '',
        totalItems: 0,
        byType: {},
        bySource: {},
        byDate: {},
        keywords: {}
      };
    }
  }

  // R√©cup√©rer toutes les donn√©es d'un agent
  static async getAgentData(agentType: 'linkedin' | 'geo') {
    const [sources, config, campaigns] = await Promise.all([
      this.getContentSources(agentType),
      this.getAgentConfig(agentType),
      this.getCampaigns(agentType)
    ]);

    return {
      type: agentType,
      sources,
      config,
      campaigns,
      exported: new Date().toISOString()
    };
  }
}

// Classe pour la migration depuis localStorage
export class LocalStorageMigrator {
  
  // Migrer toutes les donn√©es depuis localStorage
  static async migrateFromLocalStorage(): Promise<boolean> {
    console.log('üöÄ Migration depuis localStorage vers fichiers locaux...');
    
    try {
      // Cr√©er la structure de dossiers
      const structureCreated = await WebFileStorage.createDirectoryStructure();
      if (!structureCreated) {
        throw new Error('Impossible de cr√©er la structure de dossiers');
      }
      console.log('‚úÖ Structure de dossiers cr√©√©e');

      // Migrer les agents
      await this.migrateAgentData('linkedin');
      await this.migrateAgentData('geo');

      // Cr√©er du contenu de veille d'exemple
      await this.createExampleMonitoringData();

      // Optimiser les donn√©es
      await WebFileStorage.optimizeAgentData('linkedin');
      await WebFileStorage.optimizeAgentData('geo');

      console.log('üéâ Migration termin√©e avec succ√®s!');
      return true;

    } catch (error) {
      console.error('‚ùå Erreur lors de la migration:', error);
      return false;
    }
  }

  // Migrer les donn√©es d'un agent
  private static async migrateAgentData(agentType: 'linkedin' | 'geo'): Promise<void> {
    console.log(`üìã Migration des donn√©es ${agentType}...`);
    
    try {
      // Tenter de r√©cup√©rer depuis localStorage (si la classe existe)
      let sources: ContentSource[] = [];
      let config: any = null;
      let campaigns: Campaign[] = [];

      // V√©rifier si localStorage contient des donn√©es
      const localStoragePrefix = 'magicpath_';
      const sourcesKey = `${localStoragePrefix}${agentType}_sources`;
      const configKey = `${localStoragePrefix}${agentType}_config`;
      const campaignsKey = `${localStoragePrefix}${agentType}_campaigns`;

      // R√©cup√©rer depuis localStorage
      const sourcesData = localStorage.getItem(sourcesKey);
      const configData = localStorage.getItem(configKey);
      const campaignsData = localStorage.getItem(campaignsKey);

      if (sourcesData) {
        sources = JSON.parse(sourcesData);
        console.log(`  üìÑ ${sources.length} sources trouv√©es dans localStorage`);
      }

      if (configData) {
        config = JSON.parse(configData);
        console.log(`  ‚öôÔ∏è Configuration trouv√©e dans localStorage`);
      }

      if (campaignsData) {
        campaigns = JSON.parse(campaignsData);
        console.log(`  üéØ ${campaigns.length} campagnes trouv√©es dans localStorage`);
      }

      // Si aucune donn√©e localStorage, cr√©er des exemples
      if (sources.length === 0 && !config && campaigns.length === 0) {
        console.log(`  ‚ÑπÔ∏è Aucune donn√©e localStorage pour ${agentType}, cr√©ation d'exemples`);
        ({ sources, config, campaigns } = this.createExampleAgentData(agentType));
      }

      // Migrer vers le nouveau syst√®me
      await WebFileStorage.saveContentSources(agentType, sources);
      if (config) {
        await WebFileStorage.saveAgentConfig(agentType, config);
      }
      if (campaigns.length > 0) {
        await WebFileStorage.saveCampaigns(agentType, campaigns);
      }

      console.log(`  ‚úÖ Migration ${agentType} termin√©e`);

    } catch (error) {
      console.log(`  ‚ö†Ô∏è Erreur migration ${agentType}:`, error);
      // Cr√©er des donn√©es d'exemple en cas d'erreur
      const { sources, config, campaigns } = this.createExampleAgentData(agentType);
      await WebFileStorage.saveContentSources(agentType, sources);
      await WebFileStorage.saveAgentConfig(agentType, config);
      await WebFileStorage.saveCampaigns(agentType, campaigns);
    }
  }

  // Cr√©er des donn√©es d'exemple pour un agent
  private static createExampleAgentData(agentType: 'linkedin' | 'geo') {
    const sources: ContentSource[] = [
      {
        id: `example-${agentType}-${Date.now()}-1`,
        name: `Guide ${agentType === 'linkedin' ? 'LinkedIn Marketing' : 'Marketing G√©olocalis√©'}`,
        type: 'document',
        status: 'ready',
        tags: [agentType, 'marketing', 'guide'],
        lastUpdated: new Date().toISOString(),
        content: agentType === 'linkedin' 
          ? 'Guide complet sur le marketing LinkedIn. Strat√©gies d\'engagement, cr√©ation de contenu, et mesure du ROI. L\'automatisation marketing permet d\'optimiser les campagnes et d\'am√©liorer la g√©n√©ration de leads. Les outils comme Sales Navigator et LinkedIn Ads sont essentiels pour cibler efficacement les prospects.'
          : 'Guide du marketing g√©olocalis√©. Ciblage par zone g√©ographique, campagnes locales, et optimisation pour les recherches locales. Les outils de g√©olocalisation permettent de personnaliser les messages selon la localisation. Google My Business et Facebook Local Ads sont des plateformes cl√©s.',
        extractedData: {
          wordCount: 50,
          language: 'fr'
        }
      },
      {
        id: `example-${agentType}-${Date.now()}-2`,
        name: `Meilleures Pratiques ${agentType === 'linkedin' ? 'LinkedIn' : 'G√©omarketing'}`,
        type: 'transcript',
        status: 'ready',
        tags: [agentType, 'best-practices', 'strategies'],
        lastUpdated: new Date().toISOString(),
        content: agentType === 'linkedin'
          ? 'Transcript d\'une session sur les meilleures pratiques LinkedIn. Importance de la personnalisation des messages, utilisation des outils comme Sales Navigator, et mesure de l\'engagement. Le ROI se mesure via les conversions et la g√©n√©ration de leads qualifi√©s. L\'automatisation doit rester humaine et personnalis√©e.'
          : 'Transcript sur le g√©omarketing. Utilisation des donn√©es de localisation pour cibler les audiences locales, optimisation des campagnes par zone g√©ographique, et int√©gration avec les outils de CRM. La personnalisation selon la localisation am√©liore significativement les taux de conversion et l\'engagement local.',
        extractedData: {
          wordCount: 60,
          language: 'fr'
        }
      }
    ];

    const config = {
      name: `Agent ${agentType === 'linkedin' ? 'LinkedIn' : 'GEO'} Expert`,
      description: agentType === 'linkedin' 
        ? 'Agent sp√©cialis√© dans le marketing et l\'automatisation LinkedIn'
        : 'Agent sp√©cialis√© dans le marketing g√©olocalis√© et les campagnes locales',
      prompt: agentType === 'linkedin'
        ? 'Tu es un expert en marketing LinkedIn avec une expertise approfondie en automatisation, g√©n√©ration de leads, et optimisation des campagnes. Tu utilises tes connaissances pour aider les utilisateurs √† am√©liorer leur strat√©gie LinkedIn et leur ROI.'
        : 'Tu es un expert en marketing g√©olocalis√© avec une expertise en ciblage g√©ographique, campagnes locales, et optimisation pour les recherches locales. Tu aides les utilisateurs √† d√©velopper des strat√©gies marketing adapt√©es √† leur zone g√©ographique.',
      model: 'gpt-4',
      temperature: 0.7,
      maxTokens: 2000,
      tools: agentType === 'linkedin' 
        ? ['LinkedIn Ads', 'Sales Navigator', 'HubSpot', 'Hootsuite'] 
        : ['Google My Business', 'Facebook Local Ads', 'G√©olocalisation', 'Local SEO'],
      specialties: agentType === 'linkedin' 
        ? ['lead-generation', 'engagement', 'automation', 'b2b-marketing'] 
        : ['local-seo', 'geo-targeting', 'local-campaigns', 'proximity-marketing']
    };

    const campaigns: Campaign[] = [
      {
        id: `example-campaign-${agentType}-${Date.now()}`,
        name: `Campagne ${agentType === 'linkedin' ? 'LinkedIn Lead Gen' : 'G√©olocalis√©e Q1'}`,
        type: agentType,
        status: 'active',
        config: {
          objective: agentType === 'linkedin' ? 'lead-generation' : 'local-awareness',
          targetAudience: agentType === 'linkedin' 
            ? 'Business professionals, Marketing managers, C-level executives' 
            : 'Local customers within 5km radius, age 25-55',
          budget: agentType === 'linkedin' ? 5000 : 3000,
          duration: '30 days',
          kpis: agentType === 'linkedin' 
            ? ['leads generated', 'cost per lead', 'conversion rate'] 
            : ['local reach', 'store visits', 'local engagement']
        },
        createdAt: new Date().toISOString()
      }
    ];

    return { sources, config, campaigns };
  }

  // Cr√©er du contenu de veille d'exemple
  private static async createExampleMonitoringData(): Promise<void> {
    console.log('üìä Cr√©ation du contenu de veille d\'exemple...');
    
    const exampleContent = [
      {
        id: `monitor-${Date.now()}-1`,
        title: 'Les Tendances Marketing 2024 : IA et Automatisation',
        content: 'L\'intelligence artificielle transforme le paysage marketing. Les entreprises adoptent de plus en plus l\'automatisation pour personnaliser l\'exp√©rience client et optimiser leur ROI. Les outils comme ChatGPT, HubSpot et Salesforce int√®grent d√©sormais des fonctionnalit√©s IA avanc√©es pour am√©liorer la g√©n√©ration de leads et l\'engagement client.',
        type: 'article',
        source: 'Marketing Weekly',
        url: 'https://example.com/marketing-trends-2024',
        author: 'Marie Dupont',
        publishedAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        collectedAt: new Date().toISOString(),
        tags: ['ai', 'automation', 'trends', '2024'],
        metadata: {
          platform: 'web',
          category: 'industry-trends',
          readingTime: 5
        }
      },
      {
        id: `monitor-${Date.now()}-2`,
        title: 'ROI du Marketing LinkedIn : √âtude de Cas Compl√®te',
        content: '√âtude approfondie sur l\'am√©lioration du ROI gr√¢ce √† LinkedIn. Une entreprise B2B a augment√© ses leads de 250% en utilisant Sales Navigator et des campagnes cibl√©es. La cl√© du succ√®s : personnalisation des messages, suivi rigoureux des m√©triques, et automatisation intelligente des workflows de prospection.',
        type: 'post',
        source: 'LinkedIn',
        url: 'https://linkedin.com/posts/example-roi-study',
        author: 'Jean Marketing Expert',
        publishedAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),
        collectedAt: new Date().toISOString(),
        tags: ['linkedin', 'roi', 'case-study', 'b2b'],
        metadata: {
          platform: 'linkedin',
          engagement: { likes: 150, comments: 25, shares: 30 }
        }
      },
      {
        id: `monitor-${Date.now()}-3`,
        title: 'Thread: 10 Outils d\'Automatisation Marketing Incontournables',
        content: 'üßµ Thread sur les outils d\'automatisation marketing les plus efficaces en 2024: 1/ HubSpot pour l\'inbound marketing 2/ Mailchimp pour l\'email automation 3/ Zapier pour l\'int√©gration 4/ Salesforce pour le CRM 5/ Google Analytics pour le tracking 6/ Hootsuite pour les r√©seaux sociaux... Ces outils permettent d\'optimiser le ROI et de gagner du temps pr√©cieux.',
        type: 'tweet',
        source: 'Twitter',
        url: 'https://twitter.com/marketingpro/status/example',
        author: '@MarketingPro',
        publishedAt: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
        collectedAt: new Date().toISOString(),
        tags: ['tools', 'automation', 'thread', 'twitter'],
        metadata: {
          platform: 'twitter',
          metrics: { retweets: 45, likes: 120, replies: 15 }
        }
      }
    ];

    // Sauvegarder chaque contenu
    for (const content of exampleContent) {
      await WebFileStorage.saveMonitoringContent(content);
    }

    console.log(`‚úÖ ${exampleContent.length} exemples de veille cr√©√©s`);
  }

  // V√©rifier l'√©tat de la migration
  static async checkMigrationStatus(): Promise<any> {
    const linkedinData = await WebFileStorage.getAgentData('linkedin');
    const geoData = await WebFileStorage.getAgentData('geo');
    const monitoringStats = await WebFileStorage.getMonitoringStats();

    return {
      linkedin: {
        sources: linkedinData.sources.length,
        hasConfig: !!linkedinData.config,
        campaigns: linkedinData.campaigns.length
      },
      geo: {
        sources: geoData.sources.length,
        hasConfig: !!geoData.config,
        campaigns: geoData.campaigns.length
      },
      monitoring: {
        totalItems: monitoringStats.totalItems,
        sources: Object.keys(monitoringStats.bySource).length
      }
    };
  }
}

// Fonction principale pour lancer la migration
export async function migrateTolocalStorage(): Promise<boolean> {
  console.log('üöÄ D√©marrage de la migration vers le stockage local...');
  
  try {
    const success = await LocalStorageMigrator.migrateFromLocalStorage();
    
    if (success) {
      const status = await LocalStorageMigrator.checkMigrationStatus();
      
      console.log('\nüéâ Migration termin√©e avec succ√®s!');
      console.log('\nüìä R√©sum√© de la migration:');
      console.log(`‚úÖ LinkedIn: ${status.linkedin.sources} sources, ${status.linkedin.campaigns} campagnes`);
      console.log(`‚úÖ GEO: ${status.geo.sources} sources, ${status.geo.campaigns} campagnes`);
      console.log(`‚úÖ Veille: ${status.monitoring.totalItems} √©l√©ments, ${status.monitoring.sources} sources`);
      console.log('\nüìÅ Tes donn√©es sont maintenant sauvegard√©es localement dans le dossier data/');
      console.log('üß† Les donn√©es ont √©t√© optimis√©es pour une meilleure utilisation par l\'IA');
      
      return true;
    } else {
      console.log('‚ùå La migration a √©chou√©');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    return false;
  }
}

// Exposer la fonction globalement pour utilisation depuis la console
(window as any).migrateTolocalStorage = migrateTolocalStorage;