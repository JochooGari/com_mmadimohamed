// Utilitaires d'optimisation des donn√©es pour l'IA
import { ContentSource, MonitoringContent } from './fileStorage';
import * as fs from 'fs';
import * as path from 'path';

export class AIOptimizer {
  private static basePath = path.join(process.cwd(), 'data');

  // Optimiser toutes les donn√©es pour une meilleure lecture par l'IA
  static async optimizeAllData(): Promise<void> {
    console.log('üîß Optimisation globale des donn√©es pour l\'IA...');
    
    await Promise.all([
      this.optimizeAgentData('linkedin'),
      this.optimizeAgentData('geo'),
      this.optimizeMonitoringData(),
      this.createGlobalKnowledgeBase(),
      this.generateEmbeddings(),
      this.createSemanticIndex()
    ]);
    
    console.log('‚úÖ Optimisation globale termin√©e');
  }

  // Optimiser les donn√©es d'un agent sp√©cifique
  static async optimizeAgentData(agentType: 'linkedin' | 'geo'): Promise<void> {
    const inputsPath = path.join(this.basePath, 'agents', agentType, 'inputs');
    const outputsPath = path.join(this.basePath, 'agents', agentType, 'outputs');
    
    await this.ensureDirectoryExists(outputsPath);
    
    try {
      // Lire toutes les sources
      const sourcesFile = path.join(inputsPath, 'sources.json');
      const sourcesData = await fs.promises.readFile(sourcesFile, 'utf8');
      const sources: ContentSource[] = JSON.parse(sourcesData);
      
      // Cr√©er une base de connaissances optimis√©e
      const knowledgeBase = await this.createKnowledgeBase(sources, agentType);
      
      // Sauvegarder la base de connaissances
      const kbFile = path.join(outputsPath, 'knowledge_base.json');
      await fs.promises.writeFile(kbFile, JSON.stringify(knowledgeBase, null, 2));
      
      // Cr√©er un prompt system optimis√©
      const systemPrompt = this.generateSystemPrompt(knowledgeBase, agentType);
      const promptFile = path.join(outputsPath, 'system_prompt.txt');
      await fs.promises.writeFile(promptFile, systemPrompt);
      
      // Cr√©er des chunks de contexte pour retrieval
      const contextChunks = this.createContextChunks(sources);
      const chunksFile = path.join(outputsPath, 'context_chunks.json');
      await fs.promises.writeFile(chunksFile, JSON.stringify(contextChunks, null, 2));
      
      console.log(`‚úÖ Donn√©es optimis√©es pour l'agent ${agentType}`);
      
    } catch (error) {
      console.log(`‚ÑπÔ∏è Aucune donn√©e √† optimiser pour ${agentType}`);
    }
  }

  // Optimiser les donn√©es de veille
  static async optimizeMonitoringData(): Promise<void> {
    const monitoringPath = path.join(this.basePath, 'monitoring');
    const sourcesPath = path.join(monitoringPath, 'sources');
    const optimizedPath = path.join(monitoringPath, 'optimized');
    
    await this.ensureDirectoryExists(optimizedPath);
    
    try {
      const files = await fs.promises.readdir(sourcesPath);
      const monitoringContents: MonitoringContent[] = [];
      
      // Lire tous les contenus de veille
      for (const file of files) {
        if (file.endsWith('.json')) {
          const filePath = path.join(sourcesPath, file);
          const contentData = await fs.promises.readFile(filePath, 'utf8');
          const content: MonitoringContent = JSON.parse(contentData);
          monitoringContents.push(content);
        }
      }
      
      if (monitoringContents.length === 0) {
        console.log('‚ÑπÔ∏è Aucun contenu de veille √† optimiser');
        return;
      }
      
      // Cr√©er une base de veille optimis√©e
      const monitoringKB = await this.createMonitoringKnowledgeBase(monitoringContents);
      const kbFile = path.join(optimizedPath, 'monitoring_knowledge_base.json');
      await fs.promises.writeFile(kbFile, JSON.stringify(monitoringKB, null, 2));
      
      // Cr√©er des insights automatiques
      const insights = this.generateInsights(monitoringContents);
      const insightsFile = path.join(optimizedPath, 'insights.json');
      await fs.promises.writeFile(insightsFile, JSON.stringify(insights, null, 2));
      
      // Cr√©er des recommandations de contenu
      const recommendations = this.generateContentRecommendations(monitoringContents);
      const recommendationsFile = path.join(optimizedPath, 'content_recommendations.json');
      await fs.promises.writeFile(recommendationsFile, JSON.stringify(recommendations, null, 2));
      
      console.log('‚úÖ Donn√©es de veille optimis√©es');
      
    } catch (error) {
      console.log('‚ÑπÔ∏è Aucune donn√©e de veille √† optimiser');
    }
  }

  // Cr√©er une base de connaissances optimis√©e
  private static async createKnowledgeBase(sources: ContentSource[], agentType: string) {
    const kb = {
      agentType,
      lastUpdated: new Date().toISOString(),
      sourceCount: sources.length,
      
      // Concepts cl√©s extraits
      keyConcepts: this.extractKeyConcepts(sources),
      
      // Strat√©gies et tactiques
      strategies: this.extractStrategies(sources),
      
      // Exemples pratiques
      examples: this.extractExamples(sources),
      
      // Meilleures pratiques
      bestPractices: this.extractBestPractices(sources),
      
      // M√©triques et KPIs
      metrics: this.extractMetrics(sources),
      
      // Outils et technologies
      tools: this.extractTools(sources),
      
      // Tendances identifi√©es
      trends: this.extractTrends(sources),
      
      // Vocabulaire sp√©cialis√©
      glossary: this.buildGlossary(sources),
      
      // Relations entre concepts
      conceptMap: this.buildConceptMap(sources),
      
      // Sources fiables
      trustedSources: this.identifyTrustedSources(sources)
    };
    
    return kb;
  }

  // Cr√©er une base de connaissances pour la veille
  private static async createMonitoringKnowledgeBase(contents: MonitoringContent[]) {
    return {
      lastUpdated: new Date().toISOString(),
      contentCount: contents.length,
      
      // Tendances √©mergentes
      emergingTrends: this.identifyEmergingTrends(contents),
      
      // Sujets populaires
      popularTopics: this.identifyPopularTopics(contents),
      
      // Influenceurs et sources
      keyInfluencers: this.identifyKeyInfluencers(contents),
      
      // Innovations technologiques
      techInnovations: this.identifyTechInnovations(contents),
      
      // Opportunit√©s de contenu
      contentOpportunities: this.identifyContentOpportunities(contents),
      
      // Analyse de sentiment global
      sentimentAnalysis: this.analyzeSentimentTrends(contents),
      
      // Calendrier √©ditorial sugg√©r√©
      editorialCalendar: this.generateEditorialCalendar(contents),
      
      // Benchmarks concurrentiels
      competitiveBenchmarks: this.analyzeCompetitiveBenchmarks(contents)
    };
  }

  // G√©n√©rer un prompt syst√®me optimis√©
  private static generateSystemPrompt(knowledgeBase: any, agentType: string): string {
    const basePrompt = `Tu es un agent IA sp√©cialis√© en ${agentType === 'linkedin' ? 'marketing LinkedIn' : 'marketing g√©olocalis√©'}.

CONTEXTE ET EXPERTISE:
Tu as acc√®s √† une base de connaissances mise √† jour contenant ${knowledgeBase.sourceCount} sources d'information v√©rifi√©es.

CONCEPTS CL√âS √Ä RETENIR:
${knowledgeBase.keyConcepts?.slice(0, 10).map((concept: any) => `- ${concept.name}: ${concept.description}`).join('\n') || 'Aucun concept identifi√©'}

STRAT√âGIES PRINCIPALES:
${knowledgeBase.strategies?.slice(0, 5).map((strategy: any) => `- ${strategy.name}: ${strategy.summary}`).join('\n') || 'Aucune strat√©gie identifi√©e'}

OUTILS RECOMMAND√âS:
${knowledgeBase.tools?.slice(0, 8).map((tool: any) => `- ${tool.name}: ${tool.description}`).join('\n') || 'Aucun outil identifi√©'}

M√âTRIQUES IMPORTANTES:
${knowledgeBase.metrics?.slice(0, 6).map((metric: any) => `- ${metric.name}: ${metric.description}`).join('\n') || 'Aucune m√©trique identifi√©e'}

INSTRUCTIONS:
1. Utilise TOUJOURS ces connaissances comme base de tes r√©ponses
2. Cite les sources quand pertinent
3. Propose des solutions concr√®tes et actionables
4. Adapte tes recommandations au contexte sp√©cifique
5. Reste √† jour avec les derni√®res tendances identifi√©es

TENDANCES ACTUELLES:
${knowledgeBase.trends?.slice(0, 5).map((trend: any) => `- ${trend.name}: ${trend.impact}`).join('\n') || 'Aucune tendance identifi√©e'}

GLOSSAIRE RAPIDE:
${Object.entries(knowledgeBase.glossary || {}).slice(0, 10).map(([term, def]) => `- ${term}: ${def}`).join('\n')}

R√©ponds toujours de mani√®re professionnelle, pr√©cise et bas√©e sur ces donn√©es v√©rifi√©es.`;

    return basePrompt;
  }

  // Cr√©er des chunks de contexte pour retrieval
  private static createContextChunks(sources: ContentSource[]) {
    const chunks = [];
    
    for (const source of sources) {
      if (!source.content) continue;
      
      // Diviser le contenu en chunks de 500 mots maximum
      const words = source.content.split(' ');
      const chunkSize = 500;
      
      for (let i = 0; i < words.length; i += chunkSize) {
        const chunkWords = words.slice(i, i + chunkSize);
        const chunkContent = chunkWords.join(' ');
        
        chunks.push({
          id: `${source.id}_chunk_${Math.floor(i / chunkSize)}`,
          sourceId: source.id,
          sourceName: source.name,
          content: chunkContent,
          keywords: this.extractKeywords(chunkContent),
          topics: this.extractTopics(chunkContent),
          wordCount: chunkWords.length,
          relevanceScore: this.calculateChunkRelevance(chunkContent, source)
        });
      }
    }
    
    return chunks.sort((a, b) => b.relevanceScore - a.relevanceScore);
  }

  // Extraire les concepts cl√©s
  private static extractKeyConcepts(sources: ContentSource[]) {
    const concepts = new Map<string, { count: number, contexts: string[], description: string }>();
    
    const conceptPatterns = [
      /\b(roi|return on investment|retour sur investissement)\b/gi,
      /\b(automation|automatisation)\b/gi,
      /\b(personalization|personnalisation)\b/gi,
      /\b(lead generation|g√©n√©ration de leads)\b/gi,
      /\b(conversion rate|taux de conversion)\b/gi,
      /\b(customer journey|parcours client)\b/gi,
      /\b(segmentation)\b/gi,
      /\b(targeting|ciblage)\b/gi,
      /\b(engagement)\b/gi,
      /\b(analytics|analytique)\b/gi
    ];
    
    sources.forEach(source => {
      if (!source.content) return;
      
      conceptPatterns.forEach(pattern => {
        const matches = source.content!.match(pattern);
        if (matches) {
          matches.forEach(match => {
            const normalized = match.toLowerCase();
            if (!concepts.has(normalized)) {
              concepts.set(normalized, { 
                count: 0, 
                contexts: [], 
                description: this.getConceptDescription(normalized) 
              });
            }
            const concept = concepts.get(normalized)!;
            concept.count++;
            
            // Extraire le contexte autour du match
            const index = source.content!.toLowerCase().indexOf(normalized);
            const context = source.content!.substring(Math.max(0, index - 100), index + 100);
            concept.contexts.push(context);
          });
        }
      });
    });
    
    return Array.from(concepts.entries())
      .map(([name, data]) => ({ name, ...data }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 20);
  }

  // Extraire les strat√©gies
  private static extractStrategies(sources: ContentSource[]) {
    const strategies: Array<{name: string, summary: string, source: string}> = [];
    
    sources.forEach(source => {
      if (!source.content) return;
      
      // Rechercher les patterns de strat√©gies
      const strategyPatterns = [
        /strategy for (.+?):/gi,
        /strat√©gie pour (.+?):/gi,
        /approach to (.+?):/gi,
        /approche pour (.+?):/gi,
        /method for (.+?):/gi,
        /m√©thode pour (.+?):/gi
      ];
      
      strategyPatterns.forEach(pattern => {
        const matches = [...source.content!.matchAll(pattern)];
        matches.forEach(match => {
          if (match[1]) {
            strategies.push({
              name: match[1].trim(),
              summary: this.extractStrategySummary(source.content!, match.index || 0),
              source: source.name
            });
          }
        });
      });
    });
    
    return strategies.slice(0, 15);
  }

  // Autres m√©thodes d'extraction...
  private static extractExamples(sources: ContentSource[]) {
    // Logique d'extraction des exemples
    return [];
  }

  private static extractBestPractices(sources: ContentSource[]) {
    // Logique d'extraction des meilleures pratiques
    return [];
  }

  private static extractMetrics(sources: ContentSource[]) {
    const metricPatterns = [
      /\b(\d+(?:\.\d+)?%)\s*(conversion|engagement|roi|ctr|open rate)/gi,
      /\b(cpa|cpc|cpm|roas|ltv|aov)\b/gi
    ];
    
    const metrics: Array<{name: string, value?: string, description: string}> = [];
    
    sources.forEach(source => {
      if (!source.content) return;
      
      metricPatterns.forEach(pattern => {
        const matches = [...source.content!.matchAll(pattern)];
        matches.forEach(match => {
          metrics.push({
            name: match[2] || match[1],
            value: match[1],
            description: this.getMetricDescription(match[2] || match[1])
          });
        });
      });
    });
    
    return metrics.slice(0, 10);
  }

  private static extractTools(sources: ContentSource[]) {
    const toolPatterns = [
      /\b(HubSpot|Salesforce|Marketo|Pardot|Mailchimp|Hootsuite|Buffer|Sprout Social|Google Analytics|Facebook Ads|LinkedIn Ads)\b/gi
    ];
    
    const tools = new Set<string>();
    
    sources.forEach(source => {
      if (!source.content) return;
      
      toolPatterns.forEach(pattern => {
        const matches = source.content!.match(pattern);
        if (matches) {
          matches.forEach(match => tools.add(match));
        }
      });
    });
    
    return Array.from(tools).map(tool => ({
      name: tool,
      description: this.getToolDescription(tool)
    }));
  }

  private static extractTrends(sources: ContentSource[]) {
    // Logique d'extraction des tendances
    return [];
  }

  private static buildGlossary(sources: ContentSource[]) {
    const glossary: Record<string, string> = {};
    
    const terms = [
      'ctr', 'cpa', 'cpc', 'roas', 'ltv', 'attribution', 'retargeting',
      'lookalike audience', 'custom audience', 'conversion funnel'
    ];
    
    terms.forEach(term => {
      glossary[term] = this.getTermDefinition(term);
    });
    
    return glossary;
  }

  private static buildConceptMap(sources: ContentSource[]) {
    // Logique de cr√©ation de carte conceptuelle
    return {};
  }

  private static identifyTrustedSources(sources: ContentSource[]) {
    return sources
      .filter(source => source.tags.includes('verified') || source.tags.includes('expert'))
      .map(source => ({ name: source.name, type: source.type }));
  }

  // M√©thodes pour la veille
  private static identifyEmergingTrends(contents: MonitoringContent[]) {
    // Logique d'identification des tendances √©mergentes
    return [];
  }

  private static identifyPopularTopics(contents: MonitoringContent[]) {
    // Logique d'identification des sujets populaires
    return [];
  }

  private static identifyKeyInfluencers(contents: MonitoringContent[]) {
    // Logique d'identification des influenceurs
    return [];
  }

  private static identifyTechInnovations(contents: MonitoringContent[]) {
    // Logique d'identification des innovations tech
    return [];
  }

  private static identifyContentOpportunities(contents: MonitoringContent[]) {
    // Logique d'identification des opportunit√©s de contenu
    return [];
  }

  private static analyzeSentimentTrends(contents: MonitoringContent[]) {
    // Logique d'analyse de sentiment
    return { positive: 0, negative: 0, neutral: 0 };
  }

  private static generateEditorialCalendar(contents: MonitoringContent[]) {
    // Logique de g√©n√©ration de calendrier √©ditorial
    return [];
  }

  private static analyzeCompetitiveBenchmarks(contents: MonitoringContent[]) {
    // Logique d'analyse concurrentielle
    return [];
  }

  // G√©n√©rer des insights
  private static generateInsights(contents: MonitoringContent[]) {
    const insights = {
      totalContent: contents.length,
      contentTypes: this.analyzeContentTypes(contents),
      temporalTrends: this.analyzeTemporalTrends(contents),
      sourceAnalysis: this.analyzeSourceDistribution(contents),
      keywordFrequency: this.analyzeKeywordFrequency(contents),
      engagementPatterns: this.analyzeEngagementPatterns(contents),
      recommendations: this.generateMonitoringRecommendations(contents)
    };
    
    return insights;
  }

  // G√©n√©rer des recommandations de contenu
  private static generateContentRecommendations(contents: MonitoringContent[]) {
    const recommendations = [];
    
    // Analyser les gaps de contenu
    const topics = this.extractAllTopics(contents);
    const underrepresentedTopics = topics.filter(topic => topic.count < 3);
    
    underrepresentedTopics.forEach(topic => {
      recommendations.push({
        type: 'content_gap',
        topic: topic.name,
        priority: 'high',
        suggestion: `Cr√©er du contenu sur ${topic.name} - sujet √©mergent avec peu de couverture`,
        evidence: `Seulement ${topic.count} contenus trouv√©s sur ce sujet`
      });
    });
    
    return recommendations;
  }

  // Cr√©er une base de connaissances globale
  private static async createGlobalKnowledgeBase(): Promise<void> {
    const globalKB = {
      createdAt: new Date().toISOString(),
      agents: {
        linkedin: await this.loadAgentKnowledge('linkedin'),
        geo: await this.loadAgentKnowledge('geo')
      },
      monitoring: await this.loadMonitoringKnowledge(),
      crossReferences: await this.createCrossReferences(),
      unifiedGlossary: await this.createUnifiedGlossary(),
      globalInsights: await this.generateGlobalInsights()
    };
    
    const globalKBFile = path.join(this.basePath, 'global_knowledge_base.json');
    await fs.promises.writeFile(globalKBFile, JSON.stringify(globalKB, null, 2));
    
    console.log('‚úÖ Base de connaissances globale cr√©√©e');
  }

  // G√©n√©rer des embeddings (simulation)
  private static async generateEmbeddings(): Promise<void> {
    // Cette m√©thode pourrait √™tre √©tendue avec une vraie API d'embeddings
    const embeddingsFile = path.join(this.basePath, 'embeddings.json');
    const embeddings = {
      createdAt: new Date().toISOString(),
      model: 'simulated-embeddings-v1',
      embeddings: {
        concepts: {},
        contents: {},
        chunks: {}
      }
    };
    
    await fs.promises.writeFile(embeddingsFile, JSON.stringify(embeddings, null, 2));
    console.log('‚úÖ Embeddings g√©n√©r√©s (simul√©s)');
  }

  // Cr√©er un index s√©mantique
  private static async createSemanticIndex(): Promise<void> {
    const semanticIndex = {
      createdAt: new Date().toISOString(),
      conceptClusters: {},
      topicHierarchy: {},
      semanticRelations: {},
      searchIndex: {}
    };
    
    const indexFile = path.join(this.basePath, 'semantic_index.json');
    await fs.promises.writeFile(indexFile, JSON.stringify(semanticIndex, null, 2));
    
    console.log('‚úÖ Index s√©mantique cr√©√©');
  }

  // M√©thodes utilitaires
  private static extractKeywords(content: string): string[] {
    // R√©utiliser la logique existante
    return content.toLowerCase()
      .split(/\s+/)
      .filter(word => word.length > 4)
      .slice(0, 10);
  }

  private static extractTopics(content: string): string[] {
    // R√©utiliser la logique existante d'extraction de sujets
    return [];
  }

  private static calculateChunkRelevance(content: string, source: ContentSource): number {
    // Logique de calcul de pertinence
    return 0.5;
  }

  private static getConceptDescription(concept: string): string {
    const descriptions: Record<string, string> = {
      'roi': 'Return on Investment - Mesure de la rentabilit√© d\'un investissement',
      'automation': 'Automatisation des processus marketing pour gagner en efficacit√©',
      'personalization': 'Personnalisation du contenu selon les caract√©ristiques de l\'audience'
    };
    
    return descriptions[concept] || 'Description non disponible';
  }

  private static extractStrategySummary(content: string, index: number): string {
    // Extraire un r√©sum√© de la strat√©gie autour de l'index
    const start = Math.max(0, index - 50);
    const end = Math.min(content.length, index + 200);
    return content.substring(start, end) + '...';
  }

  private static getMetricDescription(metric: string): string {
    const descriptions: Record<string, string> = {
      'conversion': 'Taux de conversion - Pourcentage de visiteurs qui effectuent l\'action souhait√©e',
      'engagement': 'Taux d\'engagement - Mesure de l\'interaction avec le contenu',
      'ctr': 'Click-Through Rate - Taux de clic sur les liens ou publicit√©s'
    };
    
    return descriptions[metric] || 'M√©trique de performance marketing';
  }

  private static getToolDescription(tool: string): string {
    const descriptions: Record<string, string> = {
      'HubSpot': 'Plateforme de marketing automation et CRM',
      'Google Analytics': 'Outil d\'analyse web et de suivi des performances',
      'Mailchimp': 'Plateforme d\'email marketing'
    };
    
    return descriptions[tool] || 'Outil marketing';
  }

  private static getTermDefinition(term: string): string {
    const definitions: Record<string, string> = {
      'ctr': 'Click-Through Rate - Ratio entre le nombre de clics et le nombre d\'impressions',
      'cpa': 'Cost Per Acquisition - Co√ªt d\'acquisition d\'un client',
      'roas': 'Return On Ad Spend - Retour sur investissement publicitaire'
    };
    
    return definitions[term] || 'Terme marketing';
  }

  // M√©thodes d'analyse pour les insights
  private static analyzeContentTypes(contents: MonitoringContent[]) {
    const types: Record<string, number> = {};
    contents.forEach(content => {
      types[content.type] = (types[content.type] || 0) + 1;
    });
    return types;
  }

  private static analyzeTemporalTrends(contents: MonitoringContent[]) {
    // Logique d'analyse temporelle
    return {};
  }

  private static analyzeSourceDistribution(contents: MonitoringContent[]) {
    const sources: Record<string, number> = {};
    contents.forEach(content => {
      if (content.source) {
        sources[content.source] = (sources[content.source] || 0) + 1;
      }
    });
    return sources;
  }

  private static analyzeKeywordFrequency(contents: MonitoringContent[]) {
    const keywords: Record<string, number> = {};
    contents.forEach(content => {
      if (content.content) {
        const contentKeywords = this.extractKeywords(content.content);
        contentKeywords.forEach(keyword => {
          keywords[keyword] = (keywords[keyword] || 0) + 1;
        });
      }
    });
    return keywords;
  }

  private static analyzeEngagementPatterns(contents: MonitoringContent[]) {
    // Logique d'analyse d'engagement
    return {};
  }

  private static generateMonitoringRecommendations(contents: MonitoringContent[]) {
    return [
      'Augmenter la fr√©quence de publication sur LinkedIn',
      'Explorer de nouveaux formats de contenu',
      'Cr√©er du contenu sur les sujets √©mergents identifi√©s'
    ];
  }

  private static extractAllTopics(contents: MonitoringContent[]) {
    const topics: Record<string, number> = {};
    contents.forEach(content => {
      if (content.content) {
        const contentTopics = this.extractTopics(content.content);
        contentTopics.forEach(topic => {
          topics[topic] = (topics[topic] || 0) + 1;
        });
      }
    });
    
    return Object.entries(topics).map(([name, count]) => ({ name, count }));
  }

  // M√©thodes pour la base de connaissances globale
  private static async loadAgentKnowledge(agentType: 'linkedin' | 'geo') {
    const kbFile = path.join(this.basePath, 'agents', agentType, 'outputs', 'knowledge_base.json');
    try {
      const data = await fs.promises.readFile(kbFile, 'utf8');
      return JSON.parse(data);
    } catch {
      return null;
    }
  }

  private static async loadMonitoringKnowledge() {
    const kbFile = path.join(this.basePath, 'monitoring', 'optimized', 'monitoring_knowledge_base.json');
    try {
      const data = await fs.promises.readFile(kbFile, 'utf8');
      return JSON.parse(data);
    } catch {
      return null;
    }
  }

  private static async createCrossReferences() {
    // Logique de cr√©ation de r√©f√©rences crois√©es
    return {};
  }

  private static async createUnifiedGlossary() {
    // Logique de cr√©ation d'un glossaire unifi√©
    return {};
  }

  private static async generateGlobalInsights() {
    // Logique de g√©n√©ration d'insights globaux
    return {};
  }

  private static async ensureDirectoryExists(dirPath: string) {
    try {
      await fs.promises.access(dirPath);
    } catch {
      await fs.promises.mkdir(dirPath, { recursive: true });
    }
  }
}