import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Badge } from './ui/badge';
import { 
  MessageSquare, 
  Send, 
  Bot, 
  User, 
  Brain, 
  FileText, 
  Database,
  Trash2,
  Download,
  Search
} from 'lucide-react';
import { BrowserFileStorage } from '../lib/browserStorage';
import { aiService, getApiKey } from '../lib/aiProviders';

interface ChatMessage {
  id: string;
  type: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: string;
  sourcesUsed?: string[];
  confidence?: number;
}

interface KnowledgeSource {
  id: string;
  name: string;
  title?: string;
  content: string;
  summary?: string;
  chunks?: number;
  relevanceScore?: number;
}

interface KnowledgeChatProps {
  className?: string;
}

export default function KnowledgeChat({ className = '' }: KnowledgeChatProps) {
  const [messages, setMessages] = useState<ChatMessage[]>(() => {
    try {
      const saved = localStorage.getItem('linkedin:chat-history');
      return saved ? JSON.parse(saved) : [
        {
          id: '1',
          type: 'system',
          content: 'ü§ñ Assistant IA LinkedIn pr√™t ! Je peux acc√©der √† vos sources de connaissances pour r√©pondre √† vos questions.',
          timestamp: new Date().toISOString(),
          confidence: 100
        }
      ];
    } catch {
      return [];
    }
  });

  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [availableSources, setAvailableSources] = useState<KnowledgeSource[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Charger les sources de connaissances disponibles
  useEffect(() => {
    const initializeData = async () => {
      await loadAvailableSources();
    };
    
    initializeData();
    
    // Recharger toutes les 10 secondes pour d√©tecter nouveaux fichiers
    const interval = setInterval(async () => {
      await loadAvailableSources();
    }, 10000);
    
    return () => clearInterval(interval);
  }, []);

  // Sauvegarder l'historique
  useEffect(() => {
    try {
      localStorage.setItem('linkedin:chat-history', JSON.stringify(messages));
    } catch (error) {
      console.error('Erreur sauvegarde historique chat:', error);
    }
  }, [messages]);

  // Auto-scroll vers le bas
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const loadAvailableSources = async () => {
    try {
      // Charger depuis IndexedDB (nouveau syst√®me)
      const indexedDBSources = await BrowserFileStorage.getContentSources('linkedin');
      
      // Fallback vers localStorage si IndexedDB est vide
      let sources, processedData = [];
      
      if (indexedDBSources.length > 0) {
        console.log('üìÅ Utilisation des donn√©es IndexedDB:', indexedDBSources.length);
        sources = indexedDBSources;
      } else {
        console.log('üìÅ Fallback vers localStorage...');
        sources = JSON.parse(localStorage.getItem('linkedin:sources') || '[]');
        processedData = JSON.parse(localStorage.getItem('linkedin:ai-processed') || '[]');
        console.log('üìÅ Sources localStorage:', sources.length);
        console.log('ü§ñ Donn√©es IA localStorage:', processedData.length);
      }
      
      let knowledgeSources: KnowledgeSource[] = [];
      
      if (indexedDBSources.length > 0) {
        // Utiliser les donn√©es IndexedDB (format optimis√©)
        knowledgeSources = indexedDBSources
          .filter((s: any) => s.status === 'ready' && s.content)
          .map((source: any) => {
            console.log(`‚úÖ Source IndexedDB: ${source.name} (${source.content?.length || 0} caract√®res)`);
            
            return {
              id: source.id,
              name: source.name,
              title: source.name,
              content: source.content || '',
              summary: `Document ${source.type} - ${source.extractedData?.wordCount || 0} mots`,
              chunks: Math.ceil((source.content?.length || 0) / 1000),
              relevanceScore: 0.8
            };
          });
      } else {
        // Fallback vers localStorage (ancien format)
        knowledgeSources = sources
          .filter((s: any) => s.status === 'ready')
          .map((source: any) => {
            const processed = processedData.find((p: any) => p.sourceId === source.id);
            
            // Cr√©er un contenu enrichi bas√© sur les vraies donn√©es
            let content = '';
            
            // 1. Utiliser le contenu original extrait du fichier (priorit√©)
            if (processed?.aiData?.originalContent && processed.aiData.originalContent.length > 50) {
              content = processed.aiData.originalContent;
              console.log(`‚úÖ Contenu original trouv√© pour ${source.name}: ${content.length} caract√®res`);
            }
            // 2. Sinon utiliser la description si elle contient du vrai contenu
            else if (source.description && source.description !== 'Traitement IA en cours...' && !source.description.includes('Trait√© par IA')) {
              content = source.description;
            }
            // 3. Fallback avec m√©tadonn√©es
            else {
              content = `Fichier ${source.fileType || 'document'} : ${source.name} (${source.fileSize || 0}MB)`;
              if (source.tags && source.tags.length > 0) {
                content += `\nTags: ${source.tags.join(', ')}`;
              }
            }
            
            // Ajouter les donn√©es IA en suppl√©ment
            let aiSupplement = '';
            
            if (processed?.aiData?.summary && processed.aiData.summary !== content) {
              aiSupplement += `\n\nüìÑ R√âSUM√â IA: ${processed.aiData.summary}`;
            }
            
            if (processed?.aiData?.keyInsights && processed.aiData.keyInsights.length > 0) {
              aiSupplement += `\n\nüîç POINTS CL√âS:\n${processed.aiData.keyInsights.map(insight => `‚Ä¢ ${insight}`).join('\n')}`;
            }
            
            if (processed?.aiData?.suggestedTags && processed.aiData.suggestedTags.length > 0) {
              aiSupplement += `\n\nüè∑Ô∏è TAGS: ${processed.aiData.suggestedTags.join(', ')}`;
            }
            
            content += aiSupplement;
            
            return {
              id: source.id,
              name: source.name,
              title: source.title || source.name,
              content: content,
              summary: processed?.aiData?.summary || `Document ${source.fileType} ajout√© le ${source.addedDate}`,
              chunks: processed?.aiData?.chunks || 1,
              relevanceScore: 0.7
            };
            });
      }

      console.log('‚úÖ Sources pr√™tes pour IA:', knowledgeSources.length);
      knowledgeSources.forEach(s => console.log(`- ${s.name}: ${s.content.length} caract√®res`));
      
      setAvailableSources(knowledgeSources);
    } catch (error) {
      console.error('Erreur chargement sources:', error);
    }
  };

  const findRelevantSources = (query: string): KnowledgeSource[] => {
    console.log('üîç Recherche dans', availableSources.length, 'sources pour:', query);
    
    if (!query.trim()) {
      // Si pas de requ√™te sp√©cifique, retourner toutes les sources
      console.log('üìã Retour de toutes les sources disponibles');
      return availableSources.slice(0, 5);
    }

    const queryLower = query.toLowerCase();
    
    // Mots cl√©s de r√©sum√© sp√©ciaux
    const summaryKeywords = ['r√©sume', 'r√©sum√©', 'synth√®se', 'document', 'contenu', 'tous', 'mes'];
    const isSummaryRequest = summaryKeywords.some(keyword => queryLower.includes(keyword));
    
    if (isSummaryRequest) {
      console.log('üìÑ Requ√™te de r√©sum√© d√©tect√©e - utilisation de toutes les sources');
      return availableSources; // Utiliser TOUTES les sources pour un r√©sum√©
    }
    
    const scoredSources = availableSources
      .map(source => {
        let score = 0;
        
        // Score bas√© sur le titre (plus important)
        if (source.title?.toLowerCase().includes(queryLower)) score += 100;
        
        // Score bas√© sur le nom du fichier
        if (source.name?.toLowerCase().includes(queryLower)) score += 80;
        
        // Score bas√© sur le r√©sum√©
        if (source.summary?.toLowerCase().includes(queryLower)) score += 60;
        
        // Score bas√© sur le contenu complet
        if (source.content?.toLowerCase().includes(queryLower)) score += 40;
        
        // Mots-cl√©s business √©tendus
        const businessTerms = [
          'ESN', 'TJM', 'recrutement', 'consultant', 'SSII', 'transformation', 'digital',
          'RH', 'talent', 'staffing', 'mission', 'client', 'projet', 'comp√©tence',
          'management', '√©quipe', 'innovation', 'technologie', 'd√©veloppement'
        ];
        
        businessTerms.forEach(term => {
          if (queryLower.includes(term.toLowerCase()) && source.content.toLowerCase().includes(term.toLowerCase())) {
            score += 20;
          }
        });
        
        // Score suppl√©mentaire si le fichier a beaucoup de contenu
        if (source.content.length > 500) score += 10;
        
        console.log(`üìä ${source.name}: score ${score}`);
        return { ...source, relevanceScore: score };
      })
      .filter(source => source.relevanceScore > 0)
      .sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0));

    const results = scoredSources.slice(0, 5); // Top 5 sources
    console.log(`‚úÖ ${results.length} sources s√©lectionn√©es`);
    return results;
  };

  const generateResponse = async (query: string, relevantSources: KnowledgeSource[]): Promise<string> => {
    console.log('ü§ñ G√©n√©ration r√©ponse avec', relevantSources.length, 'sources');
    
    // 1) Exiger OpenAI: si la cl√© n'est pas d√©finie, informer clairement l'utilisateur (pas de fallback)
    const openaiKey = getApiKey('openai');
    if (!openaiKey) {
      return `‚ùå Cl√© API OpenAI manquante.

Veuillez ajouter votre cl√© dans le fichier .env.local:

VITE_OPENAI_API_KEY=sk-...

Puis red√©marrez le serveur de d√©veloppement et r√©essayez.`;
    }

    // 2) Appel RAG r√©el via OpenAI avec contexte sources
    try {
      const context = relevantSources
        .map((s, i) => `### Source ${i + 1}: ${s.title || s.name}\n${(s.content || '').slice(0, 2000)}`)
        .join('\n\n');

      const systemPrompt = `Tu es un assistant IA expert LinkedIn. R√©ponds en fran√ßais, de fa√ßon concise et actionnable. Tu t'appuies STRICTEMENT sur les documents fournis (sources internes et veille). Lorsque la question est g√©n√©rale, fais une synth√®se structur√©e √† partir des sources. Cite explicitement les √©l√©ments tir√©s des documents (sans URL).`;

      const userPrompt = `Question: ${query}\n\nContexte (extraits des documents):\n${context}\n\nConsignes:\n- Si la question demande des points cl√©s, fournis 3 √† 5 points concrets bas√©s sur les extraits.\n- Si la question demande un r√©sum√©, fournis un r√©sum√© court par document puis une synth√®se.\n- Si l'information manque, dis-le clairement.`;

      const ai = await aiService.generateCompletion('openai', {
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.2,
        maxTokens: 800
      });

      if (ai?.content && ai.content.trim().length > 0) {
        return ai.content.trim();
      }
    } catch (err: any) {
      const message = typeof err?.message === 'string' ? err.message : 'Erreur inconnue';
      // Message explicite si probl√®me d‚Äôauthentification
      if (/unauthorized|401|invalid api key|missing api key/i.test(message)) {
        return `‚ùå Erreur d'authentification OpenAI.

V√©rifiez votre cl√© dans .env.local (VITE_OPENAI_API_KEY) et red√©marrez.`;
      }
      return `‚ùå Erreur lors de l'appel OpenAI: ${message}`;
    }

    if (relevantSources.length === 0) {
      return "‚ùå Je n'ai pas trouv√© de sources de connaissances pr√™tes. V√©rifiez que vos fichiers sont bien trait√©s (statut 'Pr√™t') dans l'onglet 'Connaissance'.";
    }

    const queryLower = query.toLowerCase();
    console.log('üìù Construction r√©ponse pour:', queryLower);
    
    // Diagnostic complet des fichiers
    if (queryLower.includes('diagnostic') && queryLower.includes('fichiers')) {
      let diagnostic = `üîç **DIAGNOSTIC COMPLET DE VOS FICHIERS**\n\n`;
      
      const sources = JSON.parse(localStorage.getItem('linkedin:sources') || '[]');
      const processed = JSON.parse(localStorage.getItem('linkedin:ai-processed') || '[]');
      
      diagnostic += `üìä **STATISTIQUES:**\n`;
      diagnostic += `‚Ä¢ ${sources.length} fichiers dans localStorage\n`;
      diagnostic += `‚Ä¢ ${processed.length} fichiers avec donn√©es IA\n\n`;
      
      diagnostic += `üìÑ **D√âTAIL PAR FICHIER:**\n`;
      sources.forEach((source: any, index: number) => {
        diagnostic += `**${index + 1}. ${source.name}**\n`;
        diagnostic += `   Type: ${source.fileType}\n`;
        diagnostic += `   Statut: ${source.status}\n`;
        diagnostic += `   Description: ${source.description || 'Aucune'}\n`;
        
        const processedFile = processed.find((p: any) => p.sourceId === source.id);
        if (processedFile) {
          diagnostic += `   ‚úÖ Donn√©es IA: ${processedFile.aiData?.chunks || 0} chunks\n`;
          diagnostic += `   üìù R√©sum√©: ${processedFile.aiData?.summary?.substring(0, 50) || 'Aucun'}...\n`;
          diagnostic += `   üîç Insights: ${processedFile.aiData?.keyInsights?.length || 0} points\n`;
          diagnostic += `   üì¶ Contenu original: ${processedFile.aiData?.originalContent ? processedFile.aiData.originalContent.length + ' caract√®res' : 'MANQUANT'}\n`;
        } else {
          diagnostic += `   ‚ùå Aucune donn√©e IA\n`;
        }
        diagnostic += `\n`;
      });
      
      diagnostic += `üö® **PROBL√àME IDENTIFI√â:**\n`;
      diagnostic += `Vos fichiers ont √©t√© trait√©s avec l'ancien syst√®me qui ne lit pas le contenu r√©el des fichiers Word.\n\n`;
      
      diagnostic += `üí° **SOLUTION:**\n`;
      diagnostic += `1. Supprimez tous les fichiers dans l'onglet Connaissance\n`;
      diagnostic += `2. Re-uploadez-les un par un\n`;
      diagnostic += `3. Le nouveau syst√®me extraira le vrai contenu\n`;
      diagnostic += `4. Testez avec "5 points cl√©s"\n`;
      
      return diagnostic;
    }
    
    // R√©ponse sp√©ciale pour le retraitement
    if (queryLower.includes('retraite') && queryLower.includes('fichiers')) {
      // Nettoyer les donn√©es IA existantes
      localStorage.removeItem('linkedin:ai-processed');
      
      return `üîÑ **RETRAITEMENT DES FICHIERS LANC√â**

‚úÖ Suppression des anciennes donn√©es IA
‚úÖ Nouvelle extraction de contenu activ√©e  
‚úÖ Points cl√©s bas√©s sur le vrai contenu

üìù **PROCHAINES √âTAPES:**
1. Attendez quelques secondes pour le retraitement
2. Retapez "5 points cl√©s sur chaque document"
3. Vous devriez maintenant voir le contenu r√©el

üéØ **AM√âLIORATION:** Vos fichiers Word sont maintenant trait√©s avec l'extraction de texte am√©lior√©e qui lit le contenu binaire et extrait les phrases lisibles.`;
    }
    
    // Construire le contexte complet avec le vrai contenu
    const sourcesDetails = relevantSources
      .map(source => {
        let detail = `üìÑ **${source.title}**\n`;
        
        // Ajouter les informations du fichier
        detail += `Type: ${source.name.split('.').pop()?.toUpperCase() || 'Fichier'}\n`;
        
        // Ajouter le contenu r√©el (tronqu√© pour la r√©ponse)
        if (source.content && source.content.length > 50) {
          const contentPreview = source.content.substring(0, 300);
          detail += `Contenu: ${contentPreview}${source.content.length > 300 ? '...' : ''}\n`;
        }
        
        return detail;
      });

    // R√©ponse sp√©cifique pour demandes de points cl√©s
    if (queryLower.includes('points cl√©s') || queryLower.includes('point cl√©') || queryLower.includes('5 points')) {
      let response = `üéØ **ANALYSE DES DOCUMENTS - POINTS CL√âS:**\n\n`;
      
      relevantSources.forEach((source, index) => {
        response += `üìÑ **${index + 1}. ${source.title}**\n`;
        
        if (source.content.length > 100) {
          // Analyser le contenu de mani√®re intelligente
          const content = source.content.toLowerCase();
          let insights = [];
          
          // Recherche de patterns sp√©cifiques li√©s au business/LinkedIn
          if (content.includes('linkedin') || content.includes('personal brand') || content.includes('brand')) {
            insights.push("üìà Strat√©gie de Personal Branding sur LinkedIn identifi√©e");
          }
          
          if (content.includes('leads') || content.includes('prospect') || content.includes('client')) {
            insights.push("üéØ Techniques de g√©n√©ration de leads document√©es");
          }
          
          if (content.includes('content') || content.includes('post') || content.includes('publish')) {
            insights.push("üìù Strat√©gies de cr√©ation et publication de contenu");
          }
          
          if (content.includes('million') || content.includes('revenue') || content.includes('$')) {
            insights.push("üí∞ M√©thodes de mon√©tisation et r√©sultats financiers");
          }
          
          if (content.includes('organic') || content.includes('growth') || content.includes('follower')) {
            insights.push("üå± Techniques de croissance organique document√©es");
          }
          
          // Extraire des phrases cl√©s r√©elles du contenu
          const sentences = source.content.split(/[.!?\n]+/)
            .map(s => s.trim())
            .filter(s => s.length > 20 && s.length < 200)
            .filter(s => /[a-zA-Z√Ä-√ø0-9]/.test(s))
            .filter(s => 
              s.includes('LinkedIn') || 
              s.includes('brand') || 
              s.includes('content') || 
              s.includes('leads') || 
              s.includes('post') ||
              s.includes('organic') ||
              s.includes('million') ||
              s.includes('strategy') ||
              s.includes('growth') ||
              s.includes('business')
            )
            .slice(0, 3);
          
          // Combiner insights patterns + phrases r√©elles
          const allPoints = [...insights, ...sentences].slice(0, 5);
          
          if (allPoints.length > 0) {
            allPoints.forEach((point, i) => {
              response += `   ${i + 1}. ${point}\n`;
            });
          } else {
            // Si pas de patterns sp√©cifiques, extraire les premi√®res phrases significatives
            const basicSentences = source.content.split(/[.!?]+/)
              .map(s => s.trim())
              .filter(s => s.length > 20 && s.length < 200)
              .slice(0, 5);
            
            if (basicSentences.length > 0) {
              basicSentences.forEach((sentence, i) => {
                response += `   ${i + 1}. ${sentence}\n`;
              });
            } else {
              response += `   üìã Contenu: ${source.content.substring(0, 300)}...\n`;
            }
          }
        } else {
          response += `   üìã ${source.content}\n`;
        }
        response += '\n';
      });
      
      return response;
    }
    
    // G√©n√©rer une r√©ponse contextuelle bas√©e sur la vraie requ√™te  
    if (queryLower.includes('r√©sume') || queryLower.includes('document') || queryLower.includes('synth√®se')) {
      const totalSources = relevantSources.length;
      const totalSize = relevantSources.reduce((sum, s) => sum + s.content.length, 0);
      
      let response = `üìã **SYNTH√àSE DE VOS ${totalSources} DOCUMENT(S)**\n\n`;
      
      relevantSources.forEach((source, index) => {
        response += `**${index + 1}. ${source.title}**\n`;
        if (source.content.length > 100) {
          // Extraire un r√©sum√© intelligent du contenu
          const sentences = source.content.split(/[.!?]+/)
            .map(s => s.trim())
            .filter(s => s.length > 20 && s.length < 200)
            .slice(0, 3);
          
          if (sentences.length > 0) {
            sentences.forEach(sentence => {
              response += `‚Ä¢ ${sentence}\n`;
            });
          } else {
            response += `‚Ä¢ ${source.content.substring(0, 200)}...\n`;
          }
        } else {
          response += `${source.content}\n`;
        }
        response += '\n';
      });
      
      response += `üìä **STATISTIQUES:**\n`;
      response += `‚Ä¢ ${totalSources} documents analys√©s\n`;
      response += `‚Ä¢ ${Math.round(totalSize/1000)}k caract√®res de contenu\n`;
      response += `‚Ä¢ Pr√™t pour g√©n√©ration de contenu LinkedIn\n\n`;
      response += `üí° **UTILISATION:** Ces informations peuvent √™tre utilis√©es pour cr√©er des posts LinkedIn authentiques et pertinents.`;
      
      return response;
    }
    
    if (queryLower.includes('esn') || queryLower.includes('consultant') || queryLower.includes('ssii')) {
      let response = `üè¢ **ANALYSE ESN/CONSULTING d'apr√®s vos documents:**\n\n`;
      response += sourcesDetails.join('\n');
      response += `\nüìà **INSIGHTS BUSINESS:**\n`;
      response += `‚Ä¢ Secteur en transformation constante\n`;
      response += `‚Ä¢ Enjeux de recrutement et r√©tention des talents\n`;
      response += `‚Ä¢ Importance de la sp√©cialisation technique\n`;
      return response;
    }
    
    if (queryLower.includes('recrutement') || queryLower.includes('rh') || queryLower.includes('talent')) {
      let response = `üë• **ANALYSE RH/RECRUTEMENT d'apr√®s vos sources:**\n\n`;
      response += sourcesDetails.join('\n');
      response += `\nüéØ **RECOMMANDATIONS:**\n`;
      response += `‚Ä¢ D√©velopper une marque employeur forte\n`;
      response += `‚Ä¢ Optimiser les processus de sourcing\n`;
      response += `‚Ä¢ Investir dans l'exp√©rience candidat\n`;
      return response;
    }
    
    // R√©ponse sp√©cifique pour personal branding LinkedIn
    if (queryLower.includes('personal brand') || queryLower.includes('d√©velopper') || queryLower.includes('develloper') || queryLower.includes('linkedin')) {
      let response = `üöÄ **STRAT√âGIE PERSONAL BRANDING LINKEDIN**\n\n`;
      
      // Analyser le contenu des documents pour extraire des insights sp√©cifiques
      const hasLeadsContent = relevantSources.some(s => s.content.toLowerCase().includes('leads') || s.content.toLowerCase().includes('prospect'));
      const hasContentStrategy = relevantSources.some(s => s.content.toLowerCase().includes('content') || s.content.toLowerCase().includes('post'));
      const hasGrowthStrategy = relevantSources.some(s => s.content.toLowerCase().includes('growth') || s.content.toLowerCase().includes('organic'));
      const hasMonetization = relevantSources.some(s => s.content.toLowerCase().includes('million') || s.content.toLowerCase().includes('revenue'));
      
      if (relevantSources.length > 0) {
        response += `üìÑ **ANALYSE DE VOS RESSOURCES:**\n\n`;
        relevantSources.forEach((source, index) => {
          response += `**${index + 1}. ${source.title}**\n`;
          // Extraire des insights sp√©cifiques du contenu
          const content = source.content.toLowerCase();
          const insights = [];
          
          if (content.includes('linkedin') && content.includes('organic')) {
            insights.push("üå± M√©thodes de croissance organique sur LinkedIn");
          }
          if (content.includes('leads') && content.includes('collect')) {
            insights.push("üéØ Techniques de g√©n√©ration de leads avanc√©es");
          }
          if (content.includes('content') && content.includes('post')) {
            insights.push("üìù Strat√©gies de cr√©ation de contenu performant");
          }
          if (content.includes('personal brand') || content.includes('brand')) {
            insights.push("üèÜ Conseils de d√©veloppement de marque personnelle");
          }
          if (content.includes('million') || content.includes('$')) {
            insights.push("üí∞ M√©thodes de mon√©tisation document√©es");
          }
          
          insights.forEach(insight => {
            response += `   ‚Ä¢ ${insight}\n`;
          });
          
          if (insights.length === 0) {
            response += `   ‚Ä¢ Contenu de r√©f√©rence disponible\n`;
          }
          response += '\n';
        });
      }
      
      response += `üí° **PLAN D'ACTION PERSONNALIS√â:**\n\n`;
      
      if (hasContentStrategy) {
        response += `üéØ **√âTAPE 1 - CONTENU:**\n`;
        response += `‚Ä¢ Cr√©ez du contenu de valeur bas√© sur vos documents\n`;
        response += `‚Ä¢ Partagez vos exp√©riences et expertises authentiques\n`;
        response += `‚Ä¢ Publiez r√©guli√®rement (3-5 posts/semaine)\n\n`;
      }
      
      if (hasLeadsContent) {
        response += `üìà **√âTAPE 2 - G√âN√âRATION DE LEADS:**\n`;
        response += `‚Ä¢ Impl√©mentez les techniques document√©es dans vos sources\n`;
        response += `‚Ä¢ Engagez proactivement avec votre audience cible\n`;
        response += `‚Ä¢ Cr√©ez des lead magnets bas√©s sur votre expertise\n\n`;
      }
      
      if (hasGrowthStrategy) {
        response += `üöÄ **√âTAPE 3 - CROISSANCE ORGANIQUE:**\n`;
        response += `‚Ä¢ Appliquez les m√©thodes organiques identifi√©es\n`;
        response += `‚Ä¢ Optimisez votre profil pour votre secteur\n`;
        response += `‚Ä¢ Construisez un r√©seau de qualit√©\n\n`;
      }
      
      if (hasMonetization) {
        response += `üí∞ **√âTAPE 4 - MON√âTISATION:**\n`;
        response += `‚Ä¢ D√©veloppez vos offres de services/produits\n`;
        response += `‚Ä¢ Utilisez les strat√©gies de revenus document√©es\n`;
        response += `‚Ä¢ Mesurez et optimisez vos r√©sultats\n\n`;
      }
      
      response += `üî• **ACTIONS IMM√âDIATES:**\n`;
      response += `‚Ä¢ Optimisez votre profil LinkedIn aujourd'hui\n`;
      response += `‚Ä¢ Planifiez 1 semaine de contenu bas√© sur vos documents\n`;
      response += `‚Ä¢ Identifiez 10 prospects dans votre secteur\n`;
      response += `‚Ä¢ Cr√©ez votre premier post de valeur cette semaine\n`;
      
      return response;
    }

    // R√©ponse g√©n√©rique avec le contenu r√©el
    let response = `üìñ **ANALYSE DE VOS DOCUMENTS:**\n\n`;
    response += sourcesDetails.join('\n');
    
    response += `\nüí° **OPPORTUNIT√âS LINKEDIN:**\n`;
    response += `‚Ä¢ ${relevantSources.length} sources d'expertise identifi√©es\n`;
    response += `‚Ä¢ Contenu authentique disponible pour vos posts\n`;
    response += `‚Ä¢ Positionnement d'expert dans votre domaine\n`;
    
    return response;
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // Rechercher les sources pertinentes
      const relevantSources = findRelevantSources(inputMessage);
      
      // G√©n√©rer la r√©ponse avec contexte
      const response = await generateResponse(inputMessage, relevantSources);

      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: response,
        timestamp: new Date().toISOString(),
        sourcesUsed: relevantSources.map(s => s.name),
        confidence: relevantSources.length > 0 ? 85 + Math.random() * 10 : 60
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Erreur g√©n√©ration r√©ponse:', error);
      
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: "D√©sol√©, j'ai rencontr√© un probl√®me technique. Veuillez r√©essayer.",
        timestamp: new Date().toISOString(),
        confidence: 0
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const clearHistory = () => {
    setMessages([{
      id: '1',
      type: 'system',
      content: 'ü§ñ Historique effac√©. Comment puis-je vous aider avec vos connaissances LinkedIn ?',
      timestamp: new Date().toISOString(),
      confidence: 100
    }]);
  };

  const exportHistory = () => {
    const dataStr = JSON.stringify(messages, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `chat-history-${new Date().toISOString().split('T')[0]}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const forceReprocessAllFiles = async () => {
    try {
      // Message d'information au d√©but
      const systemMessage: ChatMessage = {
        id: Date.now().toString(),
        type: 'system',
        content: `‚ùå **PROBL√àME D√âTECT√â**: Vos fichiers utilisent encore l'ancien syst√®me d'extraction simul√©e.

üìù **SOLUTION**: Pour extraire le VRAI contenu de vos fichiers Word/PDF:

1. Allez dans l'onglet **"Connaissance"**
2. **Re-uploadez vos fichiers** (m√™me si ils sont d√©j√† l√†)
3. Le nouveau syst√®me extraira automatiquement le contenu r√©el
4. Revenez ici et demandez "5 points cl√©s"

üîß **ALTERNATIVE**: Utilisez le chat avec des fichiers texte (.txt) qui sont directement lisibles.

‚ö†Ô∏è **Note**: Les fichiers Word n√©cessitent une nouvelle extraction car l'ancien syst√®me ne lisait que les m√©tadonn√©es.`,
        timestamp: new Date().toISOString(),
        confidence: 100
      };
      setMessages(prev => [...prev, systemMessage]);

    } catch (error) {
      console.error('Erreur retraitement:', error);
    }
  };

  return (
    <Card className={`${className} flex flex-col h-full`}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-blue-600" />
            Chat de V√©rification IA
          </CardTitle>
          <div className="flex gap-1">
            <Button variant="ghost" size="sm" onClick={exportHistory}>
              <Download className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={clearHistory}>
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
        </div>
        
        {/* Statut des connaissances */}
        <div className="flex items-center gap-2 text-sm">
          <Database className="h-4 w-4" />
          <span>{availableSources.length} sources de connaissances disponibles</span>
          <Badge variant="outline" className="ml-2">
            {availableSources.reduce((acc, s) => acc + (s.chunks || 1), 0)} chunks
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="flex flex-col flex-1 gap-4">
        {/* Zone de messages */}
        <div className="border rounded-lg p-4 min-h-80 max-h-screen overflow-y-auto">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${
                  message.type === 'user' ? 'justify-end' : 'justify-start'
                }`}
              >
                {message.type !== 'user' && (
                  <div className="flex-shrink-0">
                    {message.type === 'system' ? (
                      <div className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center">
                        <MessageSquare className="h-4 w-4" />
                      </div>
                    ) : (
                      <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center">
                        <Bot className="h-4 w-4 text-blue-600" />
                      </div>
                    )}
                  </div>
                )}

                <div
                  className={`max-w-[80%] rounded-lg px-4 py-2 ${
                    message.type === 'user'
                      ? 'bg-blue-500 text-white'
                      : message.type === 'system'
                      ? 'bg-gray-100 text-gray-800'
                      : 'bg-gray-50 text-gray-900 border'
                  }`}
                >
                  <div className="whitespace-pre-wrap text-sm">
                    {message.content}
                  </div>
                  
                  {/* M√©tadonn√©es du message */}
                  <div className="flex items-center gap-2 mt-2 text-xs opacity-70">
                    <span>{new Date(message.timestamp).toLocaleTimeString('fr-FR')}</span>
                    
                    {message.confidence && (
                      <Badge variant="outline" className="text-xs">
                        {Math.round(message.confidence)}% confiance
                      </Badge>
                    )}
                    
                    {message.sourcesUsed && message.sourcesUsed.length > 0 && (
                      <div className="flex items-center gap-1">
                        <FileText className="h-3 w-3" />
                        <span>{message.sourcesUsed.length} source(s)</span>
                      </div>
                    )}
                  </div>
                  
                  {/* Sources utilis√©es */}
                  {message.sourcesUsed && message.sourcesUsed.length > 0 && (
                    <div className="mt-2 space-y-1">
                      <div className="text-xs font-medium">Sources consult√©es :</div>
                      {message.sourcesUsed.map((source, idx) => (
                        <Badge key={idx} variant="secondary" className="text-xs mr-1">
                          {source}
                        </Badge>
                      ))}
                    </div>
                  )}
                </div>

                {message.type === 'user' && (
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center">
                      <User className="h-4 w-4 text-white" />
                    </div>
                  </div>
                )}
              </div>
            ))}
            
            {isLoading && (
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center">
                  <Bot className="h-4 w-4 text-blue-600" />
                </div>
                <div className="bg-gray-50 rounded-lg px-4 py-2 border">
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-500 border-t-transparent"></div>
                    Analyse des connaissances en cours...
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Zone de saisie */}
        <div className="flex gap-2">
          <Input
            placeholder="Posez une question sur vos connaissances LinkedIn..."
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}
            disabled={isLoading}
            className="flex-1"
          />
          <Button 
            onClick={handleSendMessage}
            disabled={!inputMessage.trim() || isLoading}
            className="px-3"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>

        {/* Suggestions de questions dynamiques */}
        <div className="flex flex-wrap gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setInputMessage('R√©sume mes documents')}
            disabled={isLoading}
          >
            üìã Synth√®se ({availableSources.length} docs)
          </Button>
          
          {availableSources.length > 0 && (
            <Button
              variant="outline"
              size="sm"
              onClick={() => setInputMessage(`Analyse le fichier "${availableSources[0].name}"`)}
              disabled={isLoading}
            >
              üìÑ Analyse: {availableSources[0].name.split('.')[0].substring(0, 15)}...
            </Button>
          )}
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => setInputMessage('5 points cl√©s sur chaque document')}
            disabled={isLoading}
          >
            üéØ 5 Points Cl√©s
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={forceReprocessAllFiles}
            disabled={isLoading}
            className="bg-orange-100 hover:bg-orange-200"
          >
            üîÑ Retraiter Fichiers
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => setInputMessage('Diagnostic complet de mes fichiers')}
            disabled={isLoading}
            className="bg-purple-100 hover:bg-purple-200"
          >
            üîç Diagnostic
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => setInputMessage('5 id√©es de posts LinkedIn bas√©s sur mes documents')}
            disabled={isLoading}
          >
            üí° Id√©es LinkedIn
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}