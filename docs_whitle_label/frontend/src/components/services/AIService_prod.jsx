/**
 * Service d'Intelligence Artificielle avec OpenAI
 * Analyse de transcriptions et transformation de contenu
 */

export class AIService {
  constructor() {
    this.openaiApiKey = import.meta.env.VITE_OPENAI_API_KEY;
    this.baseUrl = 'https://api.openai.com/v1';
    
    // Configuration dynamique du backend via variables d'environnement
    this.setupBackendUrl();
    
    if (!this.openaiApiKey) {
      console.warn('‚ö†Ô∏è Cl√© API OpenAI manquante. Ajoutez VITE_OPENAI_API_KEY dans .env.local');
    }
  }

  /**
   * Configuration intelligente de l'URL backend
   */
  setupBackendUrl() {
    // 1. Priorit√© : Variable d'environnement principale
    if (import.meta.env.VITE_BACKEND_URL) {
      this.backendApiUrl = `${import.meta.env.VITE_BACKEND_URL}/api/agents`;
      console.log('üîó Backend configur√© depuis VITE_BACKEND_URL:', this.backendApiUrl);
      return;
    }

    // 2. Fallback : Port depuis variable d'environnement
    if (import.meta.env.VITE_BACKEND_PORT) {
      this.backendApiUrl = `http://localhost:${import.meta.env.VITE_BACKEND_PORT}/api/agents`;
      console.log('üîó Backend configur√© depuis VITE_BACKEND_PORT:', this.backendApiUrl);
      return;
    }

    // 3. Fallback par d√©faut
    this.backendApiUrl = 'http://localhost:3002/api/agents';
    console.log('üîó Backend configur√© par d√©faut:', this.backendApiUrl);
  }

  /**
   * Auto-d√©tection du backend disponible (√† appeler manuellement si n√©cessaire)
   */
  async detectBackendPort() {
    const fallbackPorts = import.meta.env.VITE_BACKEND_FALLBACK_PORTS 
      ? import.meta.env.VITE_BACKEND_FALLBACK_PORTS.split(',').map(p => parseInt(p.trim()))
      : [3002, 3003, 3001];
    
    console.log('üîç Recherche du backend sur les ports:', fallbackPorts);

    for (const port of fallbackPorts) {
      try {
        const healthUrl = `http://localhost:${port}/api/v2/health`;
        const response = await fetch(healthUrl, {
          method: 'GET',
          signal: AbortSignal.timeout(3000) // 3s timeout
        });
        
        if (response.ok) {
          this.backendApiUrl = `http://localhost:${port}/api/agents`;
          console.log('‚úÖ Backend d√©tect√© et configur√© sur le port:', port);
          return port;
        }
      } catch (error) {
        console.log(`‚ùå Port ${port} non disponible:`, error.message);
        continue;
      }
    }
    
    console.warn('‚ö†Ô∏è Aucun backend d√©tect√© sur les ports:', fallbackPorts);
    console.warn('üîÑ Utilisation de l\'URL par d√©faut:', this.backendApiUrl);
    return null;
  }

  /**
   * Test de connectivit√© backend avec fallback automatique
   */
  async testBackendConnection() {
    try {
      // Test de l'URL configur√©e
      const healthUrl = this.backendApiUrl.replace('/api/agents', '/api/v2/health');
      const response = await fetch(healthUrl, {
        method: 'GET',
        signal: AbortSignal.timeout(5000)
      });

      if (response.ok) {
        console.log('‚úÖ Backend connect√©:', this.backendApiUrl);
        return true;
      } else {
        throw new Error(`Backend r√©ponse: ${response.status}`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Backend principal non disponible:', error.message);
      console.log('üîç Tentative d\'auto-d√©tection...');
      
      const detectedPort = await this.detectBackendPort();
      return detectedPort !== null;
    }
  }

  // ===================
  // ANALYSE DE CONTENU
  // ===================

  async analyzeTranscript(transcript, options = {}) {
    try {
      const {
        includeSummary = true,
        includeKeyPoints = true,
        includeTags = true,
        includeSentiment = true,
        includeTopics = true,
        language = 'fr'
      } = options;

      const prompt = this.buildAnalysisPrompt(transcript, {
        includeSummary,
        includeKeyPoints,
        includeTags,
        includeSentiment,
        includeTopics,
        language
      });

      const schema = this.buildAnalysisSchema({
        includeSummary,
        includeKeyPoints,
        includeTags,
        includeSentiment,
        includeTopics
      });

      // Appel direct √† OpenAI
      const result = await this.openAIRequest(prompt, schema);
      console.log('üîç R√©sultat OpenAI:', result);
      return result;
      
    } catch (error) {
      console.error('Error analyzing transcript:', error);
      console.log('üîÑ Utilisation des donn√©es de test en raison de l\'erreur OpenAI');
      // Fallback avec donn√©es simul√©es
      const mockData = this.generateMockAnalysis(transcript);
      console.log('üîç Donn√©es de test g√©n√©r√©es:', mockData);
      return mockData;
    }
  }

  async generateSummary(text, maxLength = 200) {
    try {
      const prompt = `R√©sume ce texte en ${maxLength} caract√®res maximum, en gardant les points essentiels. R√©ponds au format JSON : "${text}"`;
      
      const result = await this.openAIRequest(prompt, {
        type: "object",
        properties: {
          summary: { type: "string" }
        }
      });

      return result.summary;
      
    } catch (error) {
      console.error('Error generating summary:', error);
      return `R√©sum√© automatique de ${text.length} caract√®res...`;
    }
  }

  async extractKeywords(text, maxKeywords = 10) {
    try {
      const prompt = `Extrais les ${maxKeywords} mots-cl√©s les plus importants de ce texte. R√©ponds au format JSON : "${text}"`;
      
      const result = await this.openAIRequest(prompt, {
        type: "object",
        properties: {
          keywords: { 
            type: "array", 
            items: { type: "string" },
            maxItems: maxKeywords
          }
        }
      });

      return result.keywords;
      
    } catch (error) {
      console.error('Error extracting keywords:', error);
      return ['mot-cl√©', 'extraction', 'erreur'];
    }
  }

  // ===================
  // M√âTHODE UNIVERSELLE POUR NEWSLETTERS
  // ===================

  /**
   * M√©thode g√©n√©rique invokeLLM pour compatibilit√© avec Base44 et le g√©n√©rateur de newsletters
   */
  async invokeLLM(systemPrompt, userPrompt, options = {}) {
    try {
      const { response_json_schema, add_context_from_internet = false } = options;

      // Construire la requ√™te avec les prompts syst√®me et utilisateur
      const messages = [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: userPrompt
        }
      ];

      const requestBody = {
        model: 'gpt-4o-mini',
        messages: messages,
        temperature: 0.7,
        max_tokens: 3000
      };

      // Si un sch√©ma JSON est fourni, l'utiliser
      if (response_json_schema) {
        requestBody.response_format = { type: "json_object" };
      }

      console.log('ü§ñ Appel invokeLLM avec OpenAI...');
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.openaiApiKey}`
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`OpenAI API Error: ${errorData.error?.message || response.statusText}`);
      }

      const data = await response.json();
      const content = data.choices[0].message.content;

      // Si un sch√©ma JSON √©tait demand√©, parser la r√©ponse
      if (response_json_schema) {
        try {
          const result = JSON.parse(content);
          return {
            success: true,
            result: result,
            metadata: {
              provider: 'openai',
              model: 'gpt-4o-mini',
              usage: data.usage
            }
          };
        } catch (parseError) {
          console.error('Error parsing JSON response:', parseError);
          throw new Error('R√©ponse OpenAI invalide - impossible de parser le JSON');
        }
      }

      return {
        success: true,
        result: content,
        metadata: {
          provider: 'openai', 
          model: 'gpt-4o-mini',
          usage: data.usage
        }
      };

    } catch (error) {
      console.error('‚ùå Erreur invokeLLM:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de l\'appel √† l\'IA'
      };
    }
  }

  // ===================
  // REQU√äTES OPENAI
  // ===================

  async openAIRequest(prompt, schema = null, customSystemPrompt = null) {
    if (!this.openaiApiKey) {
      throw new Error('Cl√© API OpenAI manquante');
    }

    const systemContent = customSystemPrompt || 'Tu es un assistant IA sp√©cialis√© dans l\'analyse de contenu vid√©o et la transformation de texte. R√©ponds toujours en fran√ßais.';

    const messages = [
      {
        role: 'system',
        content: systemContent
      },
      {
        role: 'user',
        content: prompt
      }
    ];

    const requestBody = {
      model: 'gpt-4o-mini', // ou 'gpt-4-turbo' pour plus de puissance
      messages: messages,
      temperature: 0.7,
      max_tokens: 2000
    };

    // Si un sch√©ma JSON est fourni, l'utiliser
    if (schema) {
      requestBody.response_format = { type: "json_object" };
    }

    try {
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.openaiApiKey}`
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`OpenAI API Error: ${errorData.error?.message || response.statusText}`);
      }

      const data = await response.json();
      const content = data.choices[0].message.content;

      if (schema) {
        try {
          return JSON.parse(content);
        } catch (parseError) {
          console.error('Error parsing JSON response:', parseError);
          throw new Error('R√©ponse OpenAI invalide');
        }
      }

      return content;
      
    } catch (error) {
      console.error('OpenAI request failed:', error);
      throw error;
    }
  }

  // ===================
  // CONSTRUCTION DES PROMPTS
  // ===================

  buildAnalysisPrompt(transcript, options) {
    const {
      includeSummary,
      includeKeyPoints,
      includeTags,
      includeSentiment,
      includeTopics,
      language
    } = options;

    let prompt = `Analyse cette transcription de vid√©o YouTube et fournis une analyse compl√®te au format JSON :\n\n"${transcript}"\n\n`;

    if (includeSummary) {
      prompt += `- G√©n√®re un r√©sum√© concis (150-200 mots)\n`;
    }
    if (includeKeyPoints) {
      prompt += `- Extrais 5-7 points cl√©s principaux\n`;
    }
    if (includeTags) {
      prompt += `- Identifie 8-12 tags pertinents\n`;
    }
    if (includeSentiment) {
      prompt += `- Analyse le sentiment global (positif, neutre, n√©gatif)\n`;
    }
    if (includeTopics) {
      prompt += `- Identifie les sujets/th√©matiques abord√©s\n`;
    }

    prompt += `\nR√©ponds en ${language} et fournis ta r√©ponse au format JSON valide.`;

    return prompt;
  }

  buildAnalysisSchema(options) {
    const {
      includeSummary,
      includeKeyPoints,
      includeTags,
      includeSentiment,
      includeTopics
    } = options;

    const properties = {};

    if (includeSummary) {
      properties.summary = { type: "string" };
    }
    if (includeKeyPoints) {
      properties.key_points = {
        type: "array",
        items: { type: "string" },
        minItems: 3,
        maxItems: 10
      };
    }
    if (includeTags) {
      properties.tags = {
        type: "array",
        items: { type: "string" },
        minItems: 5,
        maxItems: 15
      };
    }
    if (includeSentiment) {
      properties.sentiment_global = { 
        type: "string",
        enum: ["positif", "neutre", "n√©gatif"]
      };
      properties.sentiment_score = { 
        type: "number",
        minimum: -1,
        maximum: 1
      };
    }
    if (includeTopics) {
      properties.topics = {
        type: "array",
        items: { type: "string" },
        minItems: 2,
        maxItems: 8
      };
    }

    return {
      type: "object",
      properties: properties,
      required: Object.keys(properties)
    };
  }

  // ===================
  // DONN√âES DE TEST
  // ===================

  generateMockAnalysis(transcript) {
    console.log('üîç G√©n√©ration de donn√©es de test pour:', transcript.substring(0, 100) + '...');
    const wordCount = transcript.split(' ').length;
    
    // Analyser le contenu pour g√©n√©rer des donn√©es plus r√©alistes
    const hasAI = transcript.toLowerCase().includes('intelligence artificielle') || transcript.toLowerCase().includes('ia');
    const hasTech = transcript.toLowerCase().includes('technologie') || transcript.toLowerCase().includes('tech');
    const hasMarketing = transcript.toLowerCase().includes('marketing') || transcript.toLowerCase().includes('vente');
    const hasReact = transcript.toLowerCase().includes('react') || transcript.toLowerCase().includes('javascript');
    const hasHormozi = transcript.toLowerCase().includes('20s') || transcript.toLowerCase().includes('30s') || transcript.toLowerCase().includes('million') || transcript.toLowerCase().includes('asymmetric bets');
    
    let summary, key_points, tags, topics, sentiment;
    
    if (hasHormozi) {
      summary = `Cette vid√©o d'Alex Hormozi offre des conseils pratiques pour maximiser son potentiel dans la vingtaine et la trentaine. Il partage son exp√©rience personnelle d'entrepreneur ayant g√©n√©r√© plus de 250 millions de dollars de revenus et donne cinq conseils cl√©s pour r√©ussir dans la vie et les affaires.`;
      key_points = [
        "Prendre des paris asym√©triques quand on a rien √† perdre",
        "Se concentrer sur l'int√©r√™t compos√© (argent, comp√©tences, relations)",
        "√ätre obs√©d√© par l'ex√©cution plut√¥t que les id√©es",
        "Apprendre constamment pour rester pertinent",
        "Construire des relations de qualit√© avec des mentors et pairs"
      ];
      tags = ["entrepreneuriat", "succ√®s", "20s", "30s", "million", "conseils", "business", "d√©veloppement personnel", "paris asym√©triques", "int√©r√™t compos√©", "ex√©cution", "apprentissage", "relations"];
      topics = ["Entrepreneuriat", "D√©veloppement Personnel", "Business", "Succ√®s"];
      sentiment = "positif";
    } else if (hasAI) {
      summary = `Cette vid√©o traite de l'intelligence artificielle et de son impact sur notre soci√©t√© moderne. Le contenu explore les diff√©rentes applications de l'IA dans divers secteurs et aborde les d√©fis √©thiques pos√©s par cette technologie r√©volutionnaire.`;
      key_points = [
        "L'IA r√©volutionne de nombreux secteurs d'activit√©",
        "Applications dans la m√©decine, l'√©ducation et les transports",
        "D√©fis √©thiques et responsabilit√©s",
        "Impact sur l'emploi et la soci√©t√©",
        "Perspectives d'avenir de l'IA"
      ];
      tags = ["intelligence artificielle", "IA", "technologie", "√©thique", "innovation", "futur", "automatisation", "machine learning"];
      topics = ["Intelligence Artificielle", "Technologie", "√âthique", "Innovation"];
      sentiment = "positif";
    } else if (hasReact) {
      summary = `Cette vid√©o pr√©sente React, une biblioth√®que JavaScript pour cr√©er des interfaces utilisateur interactives. Le contenu couvre les concepts fondamentaux et guide les d√©veloppeurs dans leurs premiers projets.`;
      key_points = [
        "React est d√©velopp√© par Facebook/Meta",
        "Concepts de composants et de props",
        "Gestion de l'√©tat des composants",
        "Avantages pour le d√©veloppement web",
        "√âcosyst√®me React et outils associ√©s"
      ];
      tags = ["react", "javascript", "d√©veloppement web", "frontend", "composants", "props", "√©tat", "interface utilisateur"];
      topics = ["D√©veloppement Web", "React", "JavaScript", "Frontend"];
      sentiment = "positif";
    } else if (hasMarketing) {
      summary = `Cette vid√©o aborde le marketing digital et les strat√©gies efficaces pour 2025. Le contenu partage des techniques pratiques pour attirer des clients et augmenter les ventes dans un environnement digital en constante √©volution.`;
      key_points = [
        "√âvolution du marketing avec les r√©seaux sociaux",
        "Int√©gration de l'IA dans les strat√©gies marketing",
        "Techniques pour attirer plus de clients",
        "Mesure et optimisation des performances",
        "Tendances actuelles du marketing digital"
      ];
      tags = ["marketing digital", "strat√©gie", "r√©seaux sociaux", "vente", "clients", "optimisation", "tendances", "performance"];
      topics = ["Marketing Digital", "Strat√©gie", "Vente", "Optimisation"];
      sentiment = "positif";
    } else {
      summary = `Cette vid√©o pr√©sente un contenu informatif et √©ducatif de ${wordCount} mots. Le contenu couvre des sujets vari√©s et fournit des informations utiles pour les spectateurs int√©ress√©s par ce domaine.`;
      key_points = [
        "Contenu principal abord√© dans la vid√©o",
        "Points importants d√©velopp√©s",
        "Concepts cl√©s expliqu√©s",
        "Applications pratiques mentionn√©es",
        "Perspectives et conclusions"
      ];
      tags = ["√©ducation", "information", "contenu", "apprentissage", "d√©veloppement", "connaissance", "formation", "expertise"];
      topics = ["√âducation", "Information", "D√©veloppement"];
      sentiment = "neutre";
    }
    
    return {
      summary,
      key_points,
      tags,
      sentiment,
      sentiment_score: sentiment === "positif" ? 0.7 : sentiment === "n√©gatif" ? -0.3 : 0.1,
      topics
    };
  }

  // ===================
  // TRANSFORMATION DE CONTENU
  // ===================

  async transformToArticle(transcript, title) {
    try {
      const prompt = `Transforme cette transcription en un article structur√© avec le titre "${title}":\n\n"${transcript}"\n\nCr√©e un article avec introduction, sections principales et conclusion.`;

      const result = await this.openAIRequest(prompt, {
        type: "object",
        properties: {
          article: { type: "string" },
          sections: {
            type: "array",
            items: {
              type: "object",
              properties: {
                title: { type: "string" },
                content: { type: "string" }
              }
            }
          }
        }
      });

      return result;
    } catch (error) {
      console.error('Error transforming to article:', error);
      return {
        article: `Article bas√© sur la transcription de "${title}"...`,
        sections: [
          { title: "Introduction", content: "Introduction de l'article..." },
          { title: "D√©veloppement", content: "Contenu principal..." },
          { title: "Conclusion", content: "Conclusion de l'article..." }
        ]
      };
    }
  }

  async generateScript(transcript, format = 'video') {
    try {
      const prompt = `Transforme cette transcription en script ${format}:\n\n"${transcript}"\n\nCr√©e un script structur√© avec intro, d√©veloppement et conclusion.`;

      const result = await this.openAIRequest(prompt, {
        type: "object",
        properties: {
          script: { type: "string" },
          duration: { type: "string" },
          sections: {
            type: "array",
            items: {
              type: "object",
              properties: {
                time: { type: "string" },
                content: { type: "string" }
              }
            }
          }
        }
      });

      return result;
    } catch (error) {
      console.error('Error generating script:', error);
      return {
        script: `Script bas√© sur la transcription...`,
        duration: "5-10 minutes",
        sections: [
          { time: "0:00", content: "Introduction..." },
          { time: "1:00", content: "D√©veloppement..." },
          { time: "4:00", content: "Conclusion..." }
        ]
      };
    }
  }

  // ===================
  // G√âN√âRATION CONTENU GEO AVANC√â
  // ===================

  /**
   * G√©n√®re un article GEO optimis√© via le backend avec l'IA configur√©e dans l'admin
   */
  async generateGEOArticle(transcript, title, options = {}) {
    try {
      console.log('üöÄ G√©n√©ration article GEO via backend...');
      
      // Test de connectivit√© avec fallback automatique
      const isConnected = await this.testBackendConnection();
      if (!isConnected) {
        console.warn('‚ùå Backend non disponible, utilisation du fallback...');
        return this.transformToArticle(transcript, title);
      }
      
      const response = await fetch(`${this.backendApiUrl}/transform`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          transcript: {
            text: typeof transcript === 'string' ? transcript : transcript.transcript || transcript.text,
            title: title,
            metadata: {
              source: 'main_app',
              generated_at: new Date().toISOString()
            }
          },
          promptId: 'article',
          parameters: {
            tone: options.tone || 'professionnel',
            length: options.length || 'long',
            audience: options.audience || 'entrepreneurs'
          },
          options: {
            includeSources: true,
            includeStats: true,
            optimizeForGEO: true,
            ...options
          }
          // Note: aiSettings est g√©r√© c√¥t√© admin, pas ici
        })
      });

      const result = await response.json();
      
      if (result.success) {
        console.log('‚úÖ Article GEO g√©n√©r√© avec succ√®s');
        return {
          success: true,
          article: result.data?.script?.content || result.data?.content || result.data,
          metadata: {
            provider: result.data?.script?.ai_info?.provider,
            model: result.data?.script?.ai_info?.model,
            execution_time: result.metadata?.execution_time_ms,
            cost: result.data?.script?.ai_info?.usage?.total_cost,
            citations: result.metadata?.citations || []
          }
        };
      } else {
        throw new Error(result.error || 'Erreur lors de la g√©n√©ration');
      }
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration article GEO:', error);
      // Fallback vers l'ancienne m√©thode
      return this.transformToArticle(transcript, title);
    }
  }

  /**
   * G√©n√®re des tweets optimis√©s via le backend
   */
  async generateTweets(transcript, title, options = {}) {
    try {
      console.log('üê¶ G√©n√©ration tweets via backend...');
      
      // Test de connectivit√© avec fallback automatique
      const isConnected = await this.testBackendConnection();
      if (!isConnected) {
        console.warn('‚ùå Backend non disponible, utilisation du fallback...');
        return {
          success: false,
          tweets: [
            { content: `D√©couvrez les insights de "${title}"`, type: 'intro' },
            { content: `Points cl√©s √† retenir...`, type: 'insight' }
          ],
          error: 'Backend non disponible'
        };
      }
      
      const response = await fetch(`${this.backendApiUrl}/transform`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          transcript: {
            text: typeof transcript === 'string' ? transcript : transcript.transcript || transcript.text,
            title: title
          },
          promptId: 'tweets',
          parameters: {
            count: options.count || 5,
            type: options.type || 'insights'
          },
          options: options
        })
      });

      const result = await response.json();
      
      if (result.success) {
        console.log('‚úÖ Tweets g√©n√©r√©s avec succ√®s');
        return {
          success: true,
          tweets: result.data?.tweets || result.data,
          metadata: result.metadata
        };
      } else {
        throw new Error(result.error || 'Erreur lors de la g√©n√©ration');
      }
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration tweets:', error);
      // Fallback simple
      return {
        success: false,
        tweets: [
          { content: `D√©couvrez les insights de "${title}"`, type: 'intro' },
          { content: `Points cl√©s √† retenir...`, type: 'insight' }
        ]
      };
    }
  }

  /**
   * G√©n√®re une s√©quence de newsletters avanc√©e avec OpenAI directement
   * Utilise le syst√®me de prompt optimis√© pour les newsletters professionnelles
   */
  async generateNewsletters(transcript, title, options = {}) {
    try {
      console.log('üìß G√©n√©ration newsletters avanc√©e avec OpenAI...');
      
      // Configuration par d√©faut
      const {
        audience = "entrepreneurs et consultants B2B",
        goal = "Lead",
        nb_emails = 3,
        tone = "clair, concret, convivial",
        cta_label = "En savoir plus",
        cta_url = "#",
        include_sponsor = false,
        sponsor_name = "",
        sponsor_url = "",
        partner_mode = false,
        high_ticket = false,
        format = "md"
      } = options;

      // Prompt syst√®me optimis√© pour les newsletters
      const systemPrompt = `Tu es ¬´ √âditeur de Newsletter ¬ª. Ta mission : transformer un transcript (vid√©o, podcast, webinar‚Ä¶) en une s√©rie de newsletters claires, utiles et orient√©es action.

R√®gles simples :
- √âcris en fran√ßais naturel, phrases courtes, pas de blabla.
- Ne pas inventer. Si une info manque, mets : [√Ä v√©rifier].
- 1 objectif clair par email (CTA unique).
- Ton = ${tone}. Public = ${audience}.
- Longueur par email : 400‚Äì700 mots.

Avant d'√©crire :
1) Fais un **plan de s√©rie** : liste des ${nb_emails} emails avec un titre interne et le but de chacun.

Ensuite, pour **chaque email** :
- 3 **objets** (‚â§ 45 caract√®res) + 1 **pr√©-en-t√™te** (‚â§ 80 caract√®res).
- **Accroche** (2‚Äì3 phrases).
- 2 √† 4 **blocs** avec sous-titres (paragraphes courts + listes).
- **√âtapes concr√®tes** (checklist).
- **R√©cap'** en 3 bullets.
- **CTA** principal : ${cta_label} ‚Üí ${cta_url}.
- **P.S.** court.
${include_sponsor ? `- Ajoute un **Bloc sponsor** : ${sponsor_name} ‚Üí ${sponsor_url} (2 phrases).` : ''}
${partner_mode ? '- Ajoute un **Bloc partenaire** (1 phrase + lien).' : ''}
${high_ticket ? `- Oriente le CTA vers un **appel d√©couverte** et ins√®re un mini-encart ¬´ TAP ¬ª :
  - Training : ce qu'ils apprennent
  - Access : acc√®s/coaching  
  - Perks : livrables/garanties` : ''}

Sortie :
- Format = ${format} (md|html|json). Par d√©faut : md.
- Toujours inclure les placeholders {unsubscribe_link} et {company_address}.

R√©ponds au format JSON avec cette structure :
{
  "plan": [
    {"email": 1, "titre": "titre email", "objectif": "but de l'email"}
  ],
  "newsletters": [
    {
      "email_number": 1,
      "subjects": ["Objet 1", "Objet 2", "Objet 3"],
      "preview_text": "Pr√©-en-t√™te",
      "content": "contenu complet avec markdown",
      "cta": "${cta_label}",
      "ps": "P.S. message"
    }
  ]
}`;

      // Template utilisateur
      const userPrompt = `Titre de la s√©rie : ${title}
Audience (qui lit ?) : ${audience}
Objectif business : ${goal}
Nombre d'emails √† g√©n√©rer : ${nb_emails}

Ton & voix : ${tone}

CTA par d√©faut : ${cta_label} ‚Üí ${cta_url}

Options :
- Inclure un sponsor ? ${include_sponsor}
${include_sponsor ? `  - Nom sponsor : ${sponsor_name}
  - URL sponsor : ${sponsor_url}` : ''}
- Mode Partenaire/BOPA ? ${partner_mode}
- Mode High-Ticket ? ${high_ticket}

Format de sortie : ${format}

TRANSCRIPT (texte brut) :
${typeof transcript === 'string' ? transcript : transcript.transcript || transcript.text || JSON.stringify(transcript)}`;

      const result = await this.openAIRequest(userPrompt, {
        type: "object",
        properties: {
          plan: {
            type: "array",
            items: {
              type: "object",
              properties: {
                email: { type: "number" },
                titre: { type: "string" },
                objectif: { type: "string" }
              }
            }
          },
          newsletters: {
            type: "array",
            items: {
              type: "object",
              properties: {
                email_number: { type: "number" },
                subjects: {
                  type: "array",
                  items: { type: "string" },
                  maxItems: 3
                },
                preview_text: { type: "string" },
                content: { type: "string" },
                cta: { type: "string" },
                ps: { type: "string" }
              }
            }
          }
        }
      }, systemPrompt);
      
      console.log('‚úÖ Newsletters avanc√©es g√©n√©r√©es avec succ√®s via OpenAI');
      return {
        success: true,
        newsletters: result.newsletters || [],
        plan: result.plan || [],
        metadata: {
          provider: 'openai',
          model: 'gpt-4o-mini',
          source: 'direct_api',
          options: options
        }
      };
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration newsletters avanc√©es:', error);
      
      // Fallback simple
      return {
        success: false,
        newsletters: [
          { 
            email_number: 1,
            subjects: [`Newsletter: ${title}`, `D√©couvrez ${title}`, `Insights de ${title}`],
            preview_text: `Les points cl√©s √† retenir de ${title}`,
            content: `Contenu bas√© sur "${title}"...`,
            cta: options.cta_label || "En savoir plus",
            ps: "P.S. Ne manquez pas les prochains insights !"
          }
        ],
        plan: [
          { email: 1, titre: "Introduction", objectif: "Pr√©senter les concepts cl√©s" }
        ],
        error: error.message
      };
    }
  }

  /**
   * G√©n√®re tout le contenu en une fois (article + tweets + newsletters)
   */
  async generateAllContent(transcript, title, options = {}) {
    try {
      console.log('üöÄ G√©n√©ration compl√®te de contenu...');
      
      // G√©n√©ration en parall√®le pour optimiser les performances
      const [articleResult, tweetsResult, newslettersResult] = await Promise.allSettled([
        this.generateGEOArticle(transcript, title, options),
        this.generateTweets(transcript, title, options),
        this.generateNewsletters(transcript, title, options)
      ]);

      return {
        article: articleResult.status === 'fulfilled' ? articleResult.value : { success: false, error: articleResult.reason },
        tweets: tweetsResult.status === 'fulfilled' ? tweetsResult.value : { success: false, error: tweetsResult.reason },
        newsletters: newslettersResult.status === 'fulfilled' ? newslettersResult.value : { success: false, error: newslettersResult.reason },
        execution_summary: {
          total_time: Date.now(),
          successful_generations: [articleResult, tweetsResult, newslettersResult].filter(r => r.status === 'fulfilled').length,
          failed_generations: [articleResult, tweetsResult, newslettersResult].filter(r => r.status === 'rejected').length
        }
      };
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration compl√®te:', error);
      throw error;
    }
  }

  /**
   * G√©n√®re une analyse de contenu intelligent avec OpenAI directement
   * Extrait les citations virales, moments cl√©s et scores d'engagement
   */
  async analyzeContentIntelligence(transcript, title, options = {}) {
    try {
      console.log('üîç Analyse intelligence contenu avec OpenAI...');
      
      // Prompt d√©di√© pour l'analyse de contenu intelligent
      const intelligencePrompt = `Analyse cette transcription de vid√©o YouTube pour extraire des insights marketing et d'engagement :

TITRE: "${title}"

TRANSCRIPTION:
"${transcript}"

Analyse le contenu et fournis une r√©ponse JSON structur√©e avec :

1. CITATIONS VIRALES (5 maximum) :
   - Citations courtes et impactantes (30-200 caract√®res)
   - Phrases qui peuvent devenir virales sur les r√©seaux sociaux
   - Avec timestamp approximatif, score viral (1-10), et utilisation sugg√©r√©e

2. MOMENTS CL√âS (6 maximum) :
   - Points importants, tournants, ou insights principaux
   - Avec timestamp approximatif, description, importance (1-10), et cat√©gorie

3. ANALYSE GLOBALE :
   - Score g√©n√©ral du contenu (1-10)
   - Potentiel viral (0-100%)
   - Facteur d'engagement (1-10)
   - Th√®mes principaux identifi√©s
   - Audience recommand√©e
   - Meilleures plateformes pour ce contenu
   - R√©sum√© en 2-3 phrases

Format JSON attendu :
{
  "viralQuotes": [
    {
      "text": "citation impactante",
      "viralScore": 8.5,
      "timestamp": "3:45",
      "context": "contexte de la citation",
      "suggestedUse": ["twitter", "linkedin", "shorts"]
    }
  ],
  "keyMoments": [
    {
      "title": "Titre du moment cl√©",
      "timestamp": "2:30",
      "description": "Description du moment important",
      "importance": 9.2,
      "category": "insight"
    }
  ],
  "globalAnalysis": {
    "overallScore": 8.7,
    "viralPotential": 85,
    "engagementFactor": 8.9,
    "contentThemes": [{"name": "business", "confidence": 90}],
    "audienceRecommendation": "Entrepreneurs et professionnels du num√©rique",
    "bestPlatforms": ["LinkedIn", "Twitter", "YouTube"],
    "summary": "R√©sum√© concis du contenu et de son potentiel"
  }
}

R√©ponds uniquement avec le JSON, sans texte suppl√©mentaire.`;

      const result = await this.openAIRequest(intelligencePrompt, {
        type: "object",
        properties: {
          viralQuotes: {
            type: "array",
            items: {
              type: "object",
              properties: {
                text: { type: "string" },
                viralScore: { type: "number" },
                timestamp: { type: "string" },
                context: { type: "string" },
                suggestedUse: {
                  type: "array",
                  items: { type: "string" }
                }
              }
            }
          },
          keyMoments: {
            type: "array",
            items: {
              type: "object",
              properties: {
                title: { type: "string" },
                timestamp: { type: "string" },
                description: { type: "string" },
                importance: { type: "number" },
                category: { type: "string" }
              }
            }
          },
          globalAnalysis: {
            type: "object",
            properties: {
              overallScore: { type: "number" },
              viralPotential: { type: "number" },
              engagementFactor: { type: "number" },
              contentThemes: {
                type: "array",
                items: {
                  type: "object",
                  properties: {
                    name: { type: "string" },
                    confidence: { type: "number" }
                  }
                }
              },
              audienceRecommendation: { type: "string" },
              bestPlatforms: {
                type: "array",
                items: { type: "string" }
              },
              summary: { type: "string" }
            }
          }
        }
      });
      
      console.log('‚úÖ Analyse intelligence g√©n√©r√©e avec succ√®s via OpenAI');
      return {
        success: true,
        viralQuotes: result.viralQuotes || [],
        keyMoments: result.keyMoments || [],
        globalAnalysis: result.globalAnalysis || {},
        metadata: {
          provider: 'openai',
          model: 'gpt-4o-mini',
          source: 'direct_api'
        }
      };
      
    } catch (error) {
      console.error('‚ùå Erreur analyse intelligence OpenAI:', error);
      
      // Fallback vers analyse basique en cas d'erreur
      return this.generateFallbackIntelligence(transcript, title);
    }
  }


  /**
   * Fallback avec donn√©es par d√©faut en cas d'erreur
   */
  generateFallbackIntelligence(transcript, title) {
    console.warn('üîÑ Utilisation du fallback pour l\'intelligence de contenu');
    
    return {
      success: true,
      viralQuotes: this.getDefaultViralQuotes(),
      keyMoments: this.getDefaultKeyMoments(),
      globalAnalysis: this.getDefaultGlobalAnalysis(),
      metadata: { provider: 'fallback', model: 'local' }
    };
  }

  // M√©thodes pour donn√©es par d√©faut
  getDefaultViralQuotes() {
    return [
      {
        text: "La cl√© du succ√®s n'est pas de travailler plus dur, mais plus intelligemment",
        viralScore: 8.7,
        timestamp: "3:45",
        context: "Conseil de productivit√©",
        suggestedUse: ["twitter", "linkedin"]
      }
    ];
  }

  getDefaultKeyMoments() {
    return [
      {
        title: "Introduction du concept principal",
        timestamp: "1:23",
        description: "Pr√©sentation de l'id√©e centrale du contenu",
        importance: 9.2,
        category: "insight"
      }
    ];
  }

  getDefaultGlobalAnalysis() {
    return {
      overallScore: 8.5,
      viralPotential: 78,
      engagementFactor: 8.8,
      contentThemes: [{ name: 'business', confidence: 85 }],
      audienceRecommendation: "Professionnels et entrepreneurs",
      bestPlatforms: ["LinkedIn", "Twitter"],
      summary: "Contenu riche en insights avec un bon potentiel d'engagement..."
    };
  }
}

// Instance singleton
export const aiService = new AIService();


